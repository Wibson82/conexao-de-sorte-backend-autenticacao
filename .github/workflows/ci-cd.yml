name: "üöÄ Autenticacao - CI/CD Pipeline"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write
  packages: write # Permiss√£o para escrever no GitHub Container Registry

env:
  SERVICE_NAME: autenticacao
  TZ: America/Sao_Paulo
  IMAGE_NAME: ghcr.io/${{ github.repository }}:${{ github.sha }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate-and-build:
    name: "Validate, Build and Push Image"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      image_tag: ${{ github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 25
        uses: actions/setup-java@v4
        with:
          java-version: '25'
          distribution: 'corretto'
          cache: maven

      - name: Build application (without tests)
        shell: bash
        run: |
          set -Eeuo pipefail
          ./mvnw clean compile -DskipTests -B -q

      - name: Run tests
        shell: bash
        run: |
          set -Eeuo pipefail
          ./mvnw test -B -q

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}

      - name: Security scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'

  deploy-selfhosted:
    name: "Deploy to Self-Hosted Runner"
    needs: validate-and-build
    if: github.ref == 'refs/heads/main'
    runs-on: [self-hosted, Linux, X64, conexao-de-sorte-backend-autenticacao]
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get secrets from Azure Key Vault (via AZ CLI)
        shell: bash
        run: |
          echo "Fetching secrets from Azure Key Vault using Azure CLI..."
          SECRETS_LIST=(
            "conexao-de-sorte-database-r2dbc-url"
            "conexao-de-sorte-database-jdbc-url"
            "conexao-de-sorte-database-username"
            "conexao-de-sorte-database-password"
            "conexao-de-sorte-redis-host"
            "conexao-de-sorte-redis-port"
            "conexao-de-sorte-redis-password"
            "conexao-de-sorte-redis-database"
            "conexao-de-sorte-jwt-secret"
            "conexao-de-sorte-jwt-signing-key"
            "conexao-de-sorte-jwt-verification-key"
            "conexao-de-sorte-jwt-key-id"
            "conexao-de-sorte-jwt-issuer"
            "conexao-de-sorte-jwt-privateKey"
            "conexao-de-sorte-jwt-publicKey"
            "conexao-de-sorte-cors-allowed-origins"
            "conexao-de-sorte-cors-allow-credentials"
            "conexao-de-sorte-encryption-master-key"
            "conexao-de-sorte-server-port"
          )
          for secret_name in "${SECRETS_LIST[@]}"; do
            echo "Fetching secret: $secret_name"
            secret_value=$(az keyvault secret show --vault-name "${{ secrets.AZURE_KEYVAULT_NAME }}" --name "$secret_name" --query "value" -o tsv)
            if [[ -n "$secret_value" ]]; then
              echo "::add-mask::$secret_value"
              env_var_name=$(echo "$secret_name" | tr '-' '_' | tr '[:lower:]' '[:upper:]')
              echo "${env_var_name}=${secret_value}" >> $GITHUB_ENV
            else
              echo "Warning: Secret '$secret_name' not found in Azure Key Vault."
            fi
          done

      - name: üîê Create Docker Secrets
        run: |
          echo "Creating Docker secrets..."
          docker secret rm REDIS_PASSWORD || true
          docker secret rm DATABASE_PASSWORD || true
          docker secret rm JWT_SECRET || true
          docker secret rm ENCRYPTION_MASTER_KEY || true
          printf "$CONEXAO_DE_SORTE_REDIS_PASSWORD" | docker secret create REDIS_PASSWORD -
          printf "$CONEXAO_DE_SORTE_DATABASE_PASSWORD" | docker secret create DATABASE_PASSWORD -
          printf "$CONEXAO_DE_SORTE_JWT_SECRET" | docker secret create JWT_SECRET -
          printf "$CONEXAO_DE_SORTE_ENCRYPTION_MASTER_KEY" | docker secret create ENCRYPTION_MASTER_KEY -
          echo "Docker secrets created."

      - name: Deploy to Staging
        env:
          IMAGE_TAG: ${{ needs.validate-and-build.outputs.image_tag }}
          STACK_NAME: conexao-autenticacao
        run: |
          set -Eeuo pipefail
          echo "Deploying image with tag: $IMAGE_TAG"

          # Pull the new image from GHCR
          docker pull ${{ env.IMAGE_NAME }}

          # Deploy using Docker Stack
          docker stack deploy -c docker-compose.yml --with-registry-auth "${STACK_NAME}"

          echo "Waiting for deployment to stabilize..."
          sleep 30

          # Health check through Traefik
          health_monitor_url="https://traefik.conexaodesorte.com.br/health/service/autenticacao"
          timeout_total=300
          interval=10
          elapsed=0
          last_response=""
          status=""

          while [ $elapsed -lt $timeout_total ]; do
            echo "üîé Consultando Traefik (${elapsed}/${timeout_total}s)..."
            response=$(curl -sf --max-time 10 "$health_monitor_url" 2>/dev/null || true)
            last_response="$response"

            if [[ -n "$response" ]]; then
              status=$(echo "$response" | jq -r '.status // "unknown"' 2>/dev/null || echo "unknown")
                  status=${status//\n'/}$'
                  '/}
                                echo "üìä Status reportado: ${status:-indefinido}"

                                if [[ "$status" == "healthy" ]]; then
                                  echo "‚úÖ Traefik confirmou Autenticacao como healthy"
                                  break
                                fi
                              else
                                echo "‚ö†Ô∏è Traefik sem resposta nesta tentativa"
                              fi

                              sleep "$interval"
                              elapsed=$((elapsed + interval))
                            done

                            if [[ "$status" != "healthy" ]]; then
                              echo "‚ùå Traefik nao confirmou Autenticacao como healthy apos ${timeout_total}s"
                              echo "üìù Ultima resposta recebida: ${last_response:-<sem resposta>}"
                              exit 1
                            fi

                            echo "‚úÖ Deployment successful - autenticacao service is healthy"