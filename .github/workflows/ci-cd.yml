name: 🔐 Autenticacao Microservice - CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Destino do deploy'
        required: false
        default: 'production'
        type: choice
        options: [production]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  SERVICE_NAME: autenticacao
  TZ: America/Sao_Paulo

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'production' }}
  cancel-in-progress: false

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    name: 🏗️ Build and Test
    steps:
      - uses: actions/checkout@v4
      - name: Setup Java 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'temurin'
          cache: maven
      - name: Verify Maven wrapper
        run: |
          chmod +x ./mvnw
          ./mvnw --version
      - name: Run unit tests
        run: ./mvnw clean test -Dspring.profiles.active=azure
      - name: Build application
        run: ./mvnw clean package -DskipTests -Dspring.profiles.active=azure
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: autenticacao-microservice-jar
          path: target/*.jar
          retention-days: 7

  build-image:
    runs-on: ubuntu-latest
    name: 🐳 Build Docker Image
    needs: build-and-test
    permissions:
      id-token: write
      contents: read
      packages: write
      attestations: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-name-lower: ${{ steps.image_name.outputs.image_name_lower }}
      image-tags: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4

      - name: Compute lowercase image name
        id: image_name
        run: |
          set -euo pipefail
          REPO='${{ env.IMAGE_NAME }}'
          echo "image_name_lower=$(echo "$REPO" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.image_name.outputs.image_name_lower }}
          tags: |
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYY-MM-DD-HHmmss'}}-{{sha}},enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Autenticacao Microservice
            org.opencontainers.image.description=Authentication and JWT management microservice
            org.opencontainers.image.service=${{ env.SERVICE_NAME }}

      - name: Build and push image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          sbom: true
          provenance: mode=max
          cache-from: type=gha
          cache-to: type=gha,mode=max
          network: host
          build-args: |
            SERVICE_NAME=${{ env.SERVICE_NAME }}
            BUILD_DATE=${{ github.event.head_commit.timestamp || github.run_id }}
            VCS_REF=${{ github.sha }}
            VERSION=1.0.0

  sign-image:
    runs-on: ubuntu-latest
    name: ✍️ Sign & Verify (100% OIDC keyless)
    needs: build-image
    permissions:
      id-token: write
      contents: read
      packages: write
      attestations: write
    steps:
      - name: Verify OIDC token availability
        run: |
          echo "🔍 Verifying OIDC token is available..."
          if [ -z "${ACTIONS_ID_TOKEN_REQUEST_TOKEN:-}" ]; then
            echo "❌ OIDC token not available"
            exit 1
          fi
          echo "✅ OIDC token is available"
          
      - name: Resolve image digest ref
        id: ref
        run: |
          set -euo pipefail
          IMG="ghcr.io/${{ needs.build-image.outputs.image-name-lower }}@${{ needs.build-image.outputs.image-digest }}"
          echo "lower=$(echo "$IMG" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

      - name: Install cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: v2.5.3

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull digest
        run: docker pull "${{ steps.ref.outputs.lower }}"

      - name: Sign (keyless OIDC)
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          echo "🔐 Signing container image with OIDC keyless signature..."
          cosign sign --yes "${{ steps.ref.outputs.lower }}"

      - name: Verify OIDC signature
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          echo "✅ Verifying OIDC keyless signature..."
          cosign verify \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            --certificate-identity-regexp "^https://github.com/${{ github.repository }}/\.github/workflows/.*@refs/heads/main$" \
            "${{ steps.ref.outputs.lower }}"
          echo "🎉 Container image signature verified successfully!"
          
      - name: Generate SBOM attestation (OIDC)
        env:
          COSIGN_EXPERIMENTAL: "1"  
        run: |
          echo "📋 Generating SBOM attestation with OIDC..."
          cosign attest --yes --type=spdxjson \
            --predicate=/dev/null \
            "${{ steps.ref.outputs.lower }}" || echo "SBOM attestation optional - continuing"


  deploy-production:
    needs: [build-image, sign-image]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
    name: 🌟 Deploy to Production (Azure + Webhook)
    permissions:
      id-token: write
      contents: read
      packages: read
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login (Credential-based fallback)
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            }

      - name: Load Azure Key Vault secrets
        run: |
          set -euo pipefail
          VAULT_ENDPOINT="${{ secrets.AZURE_KEYVAULT_ENDPOINT }}"
          if [[ "$VAULT_ENDPOINT" =~ https://([^.]+)\.vault\.azure\.net ]]; then
            VAULT="${BASH_REMATCH[1]}"
          else
            echo "ERROR: Invalid AZURE_KEYVAULT_ENDPOINT format: $VAULT_ENDPOINT" >&2
            exit 1
          fi
          
          echo "Loading secrets from Azure Key Vault: $VAULT" >&2
          echo "VAULT=$VAULT" >> "$GITHUB_ENV"

          get() { 
            echo "Fetching secret: $1" >&2
            SECRET_VALUE=$(az keyvault secret show --vault-name "$VAULT" --name "$1" --query value -o tsv 2>/dev/null)
            if [ $? -ne 0 ] || [ -z "$SECRET_VALUE" ]; then
              echo "ERROR: Secret $1 not found in Azure Key Vault $VAULT" >&2
              exit 1
            fi
            echo "$SECRET_VALUE"
          }

          # Database secrets (R2DBC para projetos reativos)
          echo "DB_R2DBC_URL=$(get conexao-de-sorte-database-r2dbc-url)" >> $GITHUB_ENV
          echo "DB_USERNAME=$(get conexao-de-sorte-database-username)" >> $GITHUB_ENV
          echo "DB_PASSWORD=$(get conexao-de-sorte-database-password)" >> $GITHUB_ENV
          echo "DB_FLYWAY_URL=$(get conexao-de-sorte-database-flyway-url)" >> $GITHUB_ENV
          
          # Redis secrets
          echo "REDIS_HOST=$(get conexao-de-sorte-redis-host)" >> $GITHUB_ENV
          echo "REDIS_PORT=$(get conexao-de-sorte-redis-port)" >> $GITHUB_ENV
          echo "REDIS_PASSWORD=$(get conexao-de-sorte-redis-password)" >> $GITHUB_ENV
          echo "REDIS_DATABASE=$(get conexao-de-sorte-redis-database)" >> $GITHUB_ENV
          
          # JWT secrets
          echo "JWT_SIGNING_KEY=$(get conexao-de-sorte-jwt-signing-key)" >> $GITHUB_ENV
          echo "JWT_VERIFICATION_KEY=$(get conexao-de-sorte-jwt-verification-key)" >> $GITHUB_ENV
          echo "JWT_KEY_ID=$(get conexao-de-sorte-jwt-key-id)" >> $GITHUB_ENV
          echo "JWT_SECRET=$(get conexao-de-sorte-jwt-secret)" >> $GITHUB_ENV
          
          # Encryption secrets
          echo "ENCRYPTION_MASTER_KEY=$(get conexao-de-sorte-encryption-master-key)" >> $GITHUB_ENV
          
          # OAuth2 secrets
          echo "OAUTH2_CLIENT_ID=$(get conexao-de-sorte-oauth2-client-id)" >> $GITHUB_ENV
          echo "OAUTH2_CLIENT_SECRET=$(get conexao-de-sorte-oauth2-client-secret)" >> $GITHUB_ENV

          # Server webhook endpoint (for deployment)
          echo "WEBHOOK_ENDPOINT=$(get conexao-de-sorte-deployment-webhook-url)" >> $GITHUB_ENV
          echo "WEBHOOK_SECRET=$(get conexao-de-sorte-deployment-webhook-secret)" >> $GITHUB_ENV
          
          echo "Success: Azure Key Vault secrets loaded successfully" >&2

      - name: 📊 Prepare deployment payload
        run: |
          set -euo pipefail
          echo "🔍 Preparing deployment payload..."
          
          IMAGE_DIGEST="${{ needs.build-image.outputs.image-digest }}"
          IMAGE_NAME_LOWER="${{ needs.build-image.outputs.image-name-lower }}"
          FULL_IMAGE="ghcr.io/${IMAGE_NAME_LOWER}@${IMAGE_DIGEST}"
          
          # Create deployment payload
          DEPLOYMENT_PAYLOAD=$(cat <<EOF
          {
            "service": "auth-microservice",
            "image": "${FULL_IMAGE}",
            "port": "8081",
            "environment": "production",
            "secrets": {
              "AZURE_CLIENT_ID": "${{ secrets.AZURE_CLIENT_ID }}",
              "AZURE_TENANT_ID": "${{ secrets.AZURE_TENANT_ID }}",
              "AZURE_CLIENT_SECRET": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "AZURE_KEYVAULT_ENDPOINT": "${{ secrets.AZURE_KEYVAULT_ENDPOINT }}",
              "DB_R2DBC_URL": "${DB_R2DBC_URL}",
              "DB_USERNAME": "${DB_USERNAME}",
              "DB_PASSWORD": "${DB_PASSWORD}",
              "DB_FLYWAY_URL": "${DB_FLYWAY_URL}",
              "REDIS_HOST": "${REDIS_HOST}",
              "REDIS_PORT": "${REDIS_PORT}",
              "REDIS_PASSWORD": "${REDIS_PASSWORD}",
              "REDIS_DATABASE": "${REDIS_DATABASE}",
              "JWT_SIGNING_KEY": "${JWT_SIGNING_KEY}",
              "JWT_VERIFICATION_KEY": "${JWT_VERIFICATION_KEY}",
              "JWT_KEY_ID": "${JWT_KEY_ID}",
              "JWT_SECRET": "${JWT_SECRET}",
              "ENCRYPTION_MASTER_KEY": "${ENCRYPTION_MASTER_KEY}",
              "OAUTH2_CLIENT_ID": "${OAUTH2_CLIENT_ID}",
              "OAUTH2_CLIENT_SECRET": "${OAUTH2_CLIENT_SECRET}"
            },
            "labels": {
              "traefik.enable": "true",
              "traefik.docker.network": "conexao-network",
              "traefik.http.routers.auth-microservice.rule": "Host(\`auth.conexaodesorte.com.br\`)",
              "traefik.http.routers.auth-microservice.entrypoints": "websecure",
              "traefik.http.routers.auth-microservice.tls.certresolver": "letsencrypt",
              "traefik.http.services.auth-microservice.loadbalancer.server.port": "8081"
            }
          }
          EOF
          )
          
          echo "DEPLOYMENT_PAYLOAD<<EOF" >> $GITHUB_ENV
          echo "$DEPLOYMENT_PAYLOAD" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "✅ Deployment payload prepared"

      - name: 🚀 Deploy via webhook (Azure auth - sem SSH)
        run: |
          set -euo pipefail
          echo "🚀 Deploying auth-microservice via OIDC webhook..."
          
          # Generate webhook signature for authentication
          WEBHOOK_SIGNATURE=$(echo -n "$DEPLOYMENT_PAYLOAD" | openssl dgst -sha256 -hmac "${WEBHOOK_SECRET}" -binary | base64)
          
          echo "🔍 Sending deployment request..."
          echo "   - Webhook endpoint: ${WEBHOOK_ENDPOINT}"
          echo "   - Service: auth-microservice"
          echo "   - Image: ghcr.io/${{ needs.build-image.outputs.image-name-lower }}@${{ needs.build-image.outputs.image-digest }}"
          
          # Send webhook deployment request
          RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -H "X-Webhook-Signature: sha256=${WEBHOOK_SIGNATURE}" \
            -H "X-GitHub-Event: deployment" \
            -H "X-GitHub-Delivery: ${{ github.run_id }}" \
            -H "User-Agent: GitHub-Actions/${{ github.run_id }}" \
            --data "$DEPLOYMENT_PAYLOAD" \
            "${WEBHOOK_ENDPOINT}")
          
          HTTP_CODE=$(echo $RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          RESPONSE_BODY=$(echo $RESPONSE | sed -e 's/HTTPSTATUS:.*//g')
          
          echo "📊 Response status: ${HTTP_CODE}"
          echo "📋 Response body: ${RESPONSE_BODY}"
          
          if [[ "$HTTP_CODE" -ge 200 && "$HTTP_CODE" -lt 300 ]]; then
            echo "✅ Deployment webhook sent successfully!"
          else
            echo "❌ Deployment webhook failed with HTTP ${HTTP_CODE}"
            echo "Response: ${RESPONSE_BODY}"
            exit 1
          fi

      - name: ✅ Verificar status do deployment
        run: |
          echo "🔍 Aguardando deployment do microsserviço de autenticação..."
          echo "⏳ Esperando 60 segundos para o serviço inicializar..."
          sleep 60
          
          # Test if the service is accessible via public endpoint
          echo "🔍 Testando endpoint público do auth-microservice..."
          for i in $(seq 1 10); do
            echo "⏳ Tentativa $i/10..."
            
            # Try public health check endpoint
            if curl -fsS https://auth.conexaodesorte.com.br/actuator/health >/dev/null 2>&1; then
              echo "✅ Auth microservice está acessível publicamente!"
              echo "🎉 Deployment completado com sucesso!"
              exit 0
            fi
            
            echo "⏳ Aguardando mais 30 segundos..."
            sleep 30
          done
          
          echo "⚠️ Não foi possível confirmar que o serviço está acessível publicamente"
          echo "📋 Isso pode ser normal se o domínio ainda não estiver configurado"
          echo "✅ Webhook de deployment foi enviado com sucesso - verificar logs do servidor"

  notify:
    runs-on: ubuntu-latest
    name: 📢 Notification
    if: always()
    needs: [build-and-test, build-image, sign-image, deploy-production]
    steps:
      - uses: 8398a7/action-slack@v3
        if: always() && env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
          channel: '#ci-cd-notifications'
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              "username": "GitHub Actions",
              "icon_emoji": ":lock:",
              "attachments": [{
                "color": "${{ job.status }}" == "success" ? "good" : "${{ job.status }}" == "failure" ? "danger" : "warning",
                "fields": [{
                  "title": "🔐 Autenticacao Microservice",
                  "value": "Status: ${{ job.status }}\nBranch: ${{ github.ref_name }}\nCommit: ${{ github.sha }}",
                  "short": true
                }]
              }]
            }
