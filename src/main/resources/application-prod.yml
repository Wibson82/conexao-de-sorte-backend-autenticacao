# ===============================================================================
# CONFIGURAÇÃO DE PRODUÇÃO - MICROSERVIÇO AUTENTICAÇÃO
# ===============================================================================
# Este arquivo deve ser usado APENAS em ambiente de produção
# Todas as credenciais devem vir de variáveis de ambiente ou secrets

spring:
  config:
    import:
      - optional:configtree:/run/secrets/
      - optional:file:./config/
  
  # Configurações de aplicação para produção
  application:
    name: conexao-de-sorte-auth
    
  # Configuração reativa de banco de dados
  r2dbc:
    url: ${DB_URL:r2dbc:mysql://mysql-prod:3306/conexao_sorte_auth}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    pool:
      enabled: true
      initial-size: 15
      max-size: 100
      max-idle-time: 20m
      max-acquire-time: 30s
      validation-query: "SELECT 1"
      
  # Flyway para migrations
  flyway:
    enabled: true
    url: ${FLYWAY_URL:jdbc:mysql://mysql-prod:3306/conexao_sorte_auth}
    user: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    locations: classpath:db/migration
    baseline-on-migrate: true
    validate-on-migrate: true
    clean-disabled: true
    
  # Redis para cache reativo
  data:
    redis:
      host: ${REDIS_HOST:redis-prod}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD}
      database: 0
      lettuce:
        pool:
          enabled: true
          max-active: 50
          max-idle: 25
          min-idle: 10
          max-wait: 2000ms
      timeout: 3000ms
      connect-timeout: 2000ms
      
  # Configurações de segurança
  security:
    oauth2:
      resource-server:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI:https://auth.conexao-de-sorte.com}
          
# Configurações específicas da aplicação
app:
  jwt:
    access-token-validity: ${JWT_ACCESS_TOKEN_VALIDITY:900} # 15 minutos
    refresh-token-validity: ${JWT_REFRESH_TOKEN_VALIDITY:86400} # 1 dia
    cleanup-interval: ${JWT_CLEANUP_INTERVAL:3600} # 1 hora
    
  rate-limiting:
    login:
      requests-per-minute: ${RATE_LIMIT_LOGIN:10}
      burst-capacity: ${RATE_LIMIT_LOGIN_BURST:15}
    validation:
      requests-per-minute: ${RATE_LIMIT_VALIDATION:100}
      burst-capacity: ${RATE_LIMIT_VALIDATION_BURST:150}
      
  azure:
    key-vault:
      url: ${AZURE_KEY_VAULT_URL}
      client-id: ${AZURE_CLIENT_ID}
      # OIDC-only: sem client-secret
      # client-secret: (não utilizar)
      tenant-id: ${AZURE_TENANT_ID}
      enabled: true
      
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:https://app.conexao-de-sorte.com,https://admin.conexao-de-sorte.com}
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: "*"
    allow-credentials: true
    
# Configurações do servidor
server:
  port: ${SERVER_PORT:8080}
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,application/javascript,application/json
  http2:
    enabled: true
  error:
    include-message: never
    include-binding-errors: never
    include-stacktrace: never
    include-exception: false
    
# Logging para produção
logging:
  level:
    root: INFO
    br.tec.facilitaservicos.autenticacao: INFO
    org.springframework.security: WARN
    org.springframework.web: WARN
    io.r2dbc.mysql: WARN
    com.azure: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"
  file:
    name: logs/auth-service.log
    max-size: 100MB
    max-history: 30
    total-size-cap: 3GB
    
# Actuator para monitoramento
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      probes:
        enabled: true
    metrics:
      enabled: true
    prometheus:
      enabled: true
  health:
    circuitbreakers:
      enabled: true
    ratelimiters:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
      sla:
        http.server.requests: 50ms,100ms,200ms,500ms
        
# Resilience4j
resilience4j:
  circuitbreaker:
    instances:
      database:
        register-health-indicator: true
        failure-rate-threshold: 50
        minimum-number-of-calls: 5
        automatic-transition-from-open-to-half-open-enabled: true
        wait-duration-in-open-state: 30s
        permitted-number-of-calls-in-half-open-state: 3
        sliding-window-size: 10
        sliding-window-type: COUNT_BASED
      redis:
        register-health-indicator: true
        failure-rate-threshold: 60
        minimum-number-of-calls: 3
        wait-duration-in-open-state: 15s
        sliding-window-size: 8
      token-validation:
        register-health-indicator: true
        failure-rate-threshold: 40
        minimum-number-of-calls: 5
        wait-duration-in-open-state: 10s
        sliding-window-size: 15
        
  retry:
    instances:
      database:
        max-attempts: 3
        wait-duration: 500ms
        
  timelimiter:
    instances:
      database:
        timeout-duration: 5s
      token-validation:
        timeout-duration: 3s
