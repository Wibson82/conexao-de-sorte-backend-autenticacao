package br.tec.facilitaservicos.autenticacao.controller;

import br.tec.facilitaservicos.autenticacao.dto.TokenValidationResponseDTO;
import br.tec.facilitaservicos.autenticacao.dto.UserStatusDTO;
import br.tec.facilitaservicos.autenticacao.dto.UsuarioDTO;
import br.tec.facilitaservicos.autenticacao.service.AuthService;
import br.tec.facilitaservicos.autenticacao.service.UserValidationService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.constraints.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import reactor.core.publisher.Mono;

import java.time.Instant;

/**
 * ============================================================================
 * üîê CONTROLADOR DE VALIDA√á√ÉO DE USU√ÅRIOS - INTER-SERVICE COMMUNICATION
 * ============================================================================
 * 
 * Controlador espec√≠fico para comunica√ß√£o entre microservi√ßos.
 * Fornece endpoints para valida√ß√£o de tokens e informa√ß√µes de usu√°rios
 * que outros servi√ßos podem consumir de forma reativa.
 * 
 * Endpoints dispon√≠veis:
 * - POST /api/v1/auth/validate - Valida√ß√£o de tokens JWT
 * - GET /api/v1/users/{userId} - Informa√ß√µes do usu√°rio
 * - GET /api/v1/users/{userId}/status - Status online do usu√°rio
 * - GET /api/v1/users/{userId}/permissions - Permiss√µes do usu√°rio
 * 
 * Caracter√≠sticas:
 * - Otimizado para chamadas inter-service
 * - Cache inteligente para performance
 * - Circuit breakers integrados
 * - Observabilidade completa
 * ============================================================================
 */
@RestController
@RequestMapping("/api/v1")
@Tag(name = "User Validation", description = "Endpoints para valida√ß√£o entre microservi√ßos")
public class UserValidationController {

    private static final Logger logger = LoggerFactory.getLogger(UserValidationController.class);

    private final AuthService authService;
    private final UserValidationService userValidationService;

    public UserValidationController(AuthService authService, UserValidationService userValidationService) {
        this.authService = authService;
        this.userValidationService = userValidationService;
    }

    /**
     * üîç Endpoint para valida√ß√£o de tokens por outros microservi√ßos.
     * 
     * Usado pelos outros servi√ßos para verificar se um token JWT √© v√°lido
     * e obter informa√ß√µes b√°sicas do usu√°rio sem precisar validar localmente.
     */
    @PostMapping(value = "/auth/validate",
                 produces = MediaType.APPLICATION_JSON_VALUE)
    @Operation(
        summary = "Valida√ß√£o de token JWT para microservi√ßos",
        description = "Valida token JWT e retorna informa√ß√µes do usu√°rio para comunica√ß√£o inter-service"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "Token v√°lido - retorna dados do usu√°rio",
            content = @Content(schema = @Schema(implementation = TokenValidationResponseDTO.class))
        ),
        @ApiResponse(
            responseCode = "401",
            description = "Token inv√°lido ou expirado",
            content = @Content(schema = @Schema(implementation = TokenValidationResponseDTO.class))
        )
    })
    public Mono<ResponseEntity<TokenValidationResponseDTO>> validateToken(
            @RequestHeader("Authorization") String authorizationHeader) {

        logger.debug("üîç Valida√ß√£o de token solicitada por microservi√ßo");

        return extractTokenFromHeader(authorizationHeader)
            .flatMap(token -> userValidationService.validateTokenForServices(token))
            .map(response -> {
                HttpStatus status = response.isValid() ? HttpStatus.OK : HttpStatus.UNAUTHORIZED;
                logger.debug("‚úÖ Token validation result: valid={}, userId={}", 
                           response.isValid(), response.getUserId());
                
                return ResponseEntity.status(status)
                    .header("Cache-Control", "private, max-age=300") // Cache 5 min se v√°lido
                    .body(response);
            })
            .onErrorResume(throwable -> {
                logger.warn("‚ùå Erro na valida√ß√£o de token: {}", throwable.getMessage());
                
                TokenValidationResponseDTO invalidResponse = TokenValidationResponseDTO.builder()
                    .valid(false)
                    .errorMessage("Failed to validate token")
                    .build();
                    
                return Mono.just(ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(invalidResponse));
            });
    }

    /**
     * üë§ Endpoint para obter informa√ß√µes do usu√°rio por ID.
     * 
     * Usado por outros microservi√ßos para obter dados b√°sicos de um usu√°rio
     * com base no ID extra√≠do do token JWT.
     */
    @GetMapping(value = "/users/{userId}",
                produces = MediaType.APPLICATION_JSON_VALUE)
    @Operation(
        summary = "Obter informa√ß√µes do usu√°rio",
        description = "Retorna informa√ß√µes b√°sicas do usu√°rio para comunica√ß√£o inter-service"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "Usu√°rio encontrado",
            content = @Content(schema = @Schema(implementation = UsuarioDTO.class))
        ),
        @ApiResponse(
            responseCode = "404",
            description = "Usu√°rio n√£o encontrado"
        )
    })
    @PreAuthorize("hasAuthority('SCOPE_USER_READ') or authentication.name == #userId.toString()")
    public Mono<ResponseEntity<UsuarioDTO>> getUserInfo(@PathVariable @NotNull Long userId) {
        
        logger.debug("üë§ Informa√ß√µes do usu√°rio solicitadas: userId={}", userId);
        
        return userValidationService.getUserById(userId)
            .map(user -> {
                logger.debug("‚úÖ Usu√°rio encontrado: userId={}, username={}", 
                           user.getId(), user.getUsername());
                
                return ResponseEntity.ok()
                    .header("Cache-Control", "private, max-age=600") // Cache 10 min
                    .body(user);
            })
            .switchIfEmpty(
                Mono.fromCallable(() -> {
                    logger.debug("‚ùå Usu√°rio n√£o encontrado: userId={}", userId);
                    return ResponseEntity.notFound().<UsuarioDTO>build();
                })
            )
            .onErrorResume(throwable -> {
                logger.error("‚ùå Erro ao buscar usu√°rio {}: {}", userId, throwable.getMessage());
                return Mono.just(ResponseEntity.internalServerError().<UsuarioDTO>build());
            });
    }

    /**
     * üü¢ Endpoint para verificar status online do usu√°rio.
     * 
     * Usado principalmente pelo microservi√ßo de chat para verificar
     * se um usu√°rio est√° online antes de enviar mensagens.
     */
    @GetMapping(value = "/users/{userId}/status",
                produces = MediaType.APPLICATION_JSON_VALUE)
    @Operation(
        summary = "Status online do usu√°rio",
        description = "Verifica se o usu√°rio est√° online e retorna √∫ltimo acesso"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "Status do usu√°rio obtido com sucesso",
            content = @Content(schema = @Schema(implementation = UserStatusDTO.class))
        )
    })
    public Mono<ResponseEntity<UserStatusDTO>> getUserStatus(@PathVariable @NotNull Long userId) {
        
        logger.debug("üü¢ Status do usu√°rio solicitado: userId={}", userId);
        
        return userValidationService.getUserStatus(userId)
            .map(status -> {
                logger.debug("‚úÖ Status obtido: userId={}, online={}, lastSeen={}", 
                           userId, status.isOnline(), status.getLastSeen());
                
                return ResponseEntity.ok()
                    .header("Cache-Control", "private, max-age=60") // Cache 1 min apenas
                    .body(status);
            })
            .onErrorResume(throwable -> {
                logger.warn("‚ùå Erro ao obter status do usu√°rio {}: {}", userId, throwable.getMessage());
                
                // Retorna status offline em caso de erro
                UserStatusDTO offlineStatus = UserStatusDTO.builder()
                    .userId(userId)
                    .online(false)
                    .lastSeen(Instant.now().minusSeconds(3600)) // 1 hora atr√°s
                    .status("UNKNOWN")
                    .build();
                    
                return Mono.just(ResponseEntity.ok(offlineStatus));
            });
    }

    /**
     * üîë Endpoint para obter permiss√µes do usu√°rio.
     * 
     * Usado para verifica√ß√£o de autoriza√ß√£o granular em outros microservi√ßos.
     */
    @GetMapping(value = "/users/{userId}/permissions",
                produces = MediaType.APPLICATION_JSON_VALUE)
    @Operation(
        summary = "Permiss√µes do usu√°rio",
        description = "Retorna lista de permiss√µes/roles do usu√°rio"
    )
    @PreAuthorize("hasAuthority('SCOPE_ADMIN') or authentication.name == #userId.toString()")
    public Mono<ResponseEntity<Object>> getUserPermissions(@PathVariable @NotNull Long userId) {
        
        logger.debug("üîë Permiss√µes do usu√°rio solicitadas: userId={}", userId);
        
        return userValidationService.getUserPermissions(userId)
            .map(permissions -> {
                logger.debug("‚úÖ Permiss√µes obtidas: userId={}, count={}", 
                           userId, permissions.size());
                
                return ResponseEntity.ok()
                    .header("Cache-Control", "private, max-age=1800") // Cache 30 min
                    .body((Object) permissions);
            })
            .onErrorResume(throwable -> {
                logger.error("‚ùå Erro ao obter permiss√µes do usu√°rio {}: {}", userId, throwable.getMessage());
                return Mono.just(ResponseEntity.internalServerError().build());
            });
    }

    /**
     * üìä Health check espec√≠fico para valida√ß√£o de usu√°rios.
     */
    @GetMapping(value = "/users/health",
                produces = MediaType.APPLICATION_JSON_VALUE)
    @Operation(
        summary = "Health check do servi√ßo de valida√ß√£o",
        description = "Verifica sa√∫de dos componentes de valida√ß√£o de usu√°rios"
    )
    public Mono<ResponseEntity<Object>> healthCheck() {
        
        return userValidationService.performHealthCheck()
            .map(health -> ResponseEntity.ok().body((Object) health))
            .onErrorReturn(ResponseEntity.status(HttpStatus.SERVICE_UNAVAILABLE)
                .body((Object) java.util.Map.of(
                    "status", "DOWN",
                    "component", "user-validation",
                    "timestamp", Instant.now().toString()
                )));
    }

    // M√©todos auxiliares privados

    private Mono<String> extractTokenFromHeader(String authorizationHeader) {
        if (authorizationHeader == null || !authorizationHeader.startsWith("Bearer ")) {
            return Mono.error(new IllegalArgumentException("Invalid Authorization header format"));
        }
        
        String token = authorizationHeader.substring(7); // Remove "Bearer "
        if (token.trim().isEmpty()) {
            return Mono.error(new IllegalArgumentException("Empty token"));
        }
        
        return Mono.just(token);
    }
}