name: "🚀 Autenticacao - CI/CD Pipeline"

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]
  workflow_dispatch:
    inputs:
      environment:
        description: "Destino do deploy"
        required: false
        default: "staging"
        type: choice
        options: [ staging, production ]

# ----------------------------------------------------------------------
# PERMISSÕES MÍNIMAS OIDC
# ----------------------------------------------------------------------

permissions:
  contents: read
  id-token: write

# ----------------------------------------------------------------------
# PARÂMETROS GERAIS
# ----------------------------------------------------------------------

env:
  SERVICE_NAME: autenticacao
  TZ: America/Sao_Paulo

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'staging' }}
  cancel-in-progress: false

# ----------------------------------------------------------------------
# JOBS
# ----------------------------------------------------------------------

jobs:
  build_and_deploy_backend:
    runs-on: [self-hosted, Linux, X64, conexao-de-sorte-backend-autenticacao]
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get secrets from Azure Key Vault (via AZ CLI)
        shell: bash
        run: |
          echo "Fetching secrets from Azure Key Vault using Azure CLI..."
          SECRETS_LIST=(
            "conexao-de-sorte-database-r2dbc-url"
            "conexao-de-sorte-database-jdbc-url"
            "conexao-de-sorte-database-username"
            "conexao-de-sorte-database-password"
            "conexao-de-sorte-redis-host"
            "conexao-de-sorte-redis-port"
            "conexao-de-sorte-redis-password"
            "conexao-de-sorte-redis-database"
            "conexao-de-sorte-jwt-secret"
            "conexao-de-sorte-jwt-signing-key"
            "conexao-de-sorte-jwt-verification-key"
            "conexao-de-sorte-jwt-key-id"
            "conexao-de-sorte-jwt-issuer"
            "conexao-de-sorte-jwt-privateKey"
            "conexao-de-sorte-jwt-publicKey"
            "conexao-de-sorte-cors-allowed-origins"
            "conexao-de-sorte-cors-allow-credentials"
            "conexao-de-sorte-encryption-master-key"
            "conexao-de-sorte-server-port"
          )

          for secret_name in "${SECRETS_LIST[@]}"; do
            echo "Fetching secret: $secret_name"
            secret_value=$(az keyvault secret show --vault-name "${{ secrets.AZURE_KEYVAULT_NAME }}" --name "$secret_name" --query "value" -o tsv 2>/dev/null)
            if [[ -n "$secret_value" ]]; then
              echo "::add-mask::$secret_value"
              env_var_name=$(echo "$secret_name" | tr '-' '_' | tr '[:lower:]' '[:upper:]')
              echo "${env_var_name}=${secret_value}" >> $GITHUB_ENV
              echo "Secret '$secret_name' fetched and set as environment variable '${env_var_name}'."
            else
              echo "Warning: Secret '$secret_name' not found in Azure Key Vault."
            fi
          done

      - name: 🔐 Create Docker Secrets
        run: |
          echo "Creating Docker secrets..."
          
          # Remove secrets first to ensure idempotency
          docker secret rm REDIS_PASSWORD || true
          docker secret rm DATABASE_PASSWORD || true
          docker secret rm JWT_SECRET || true
          docker secret rm ENCRYPTION_MASTER_KEY || true
          
          # Create secrets from environment variables fetched from Key Vault
          printf "$CONEXAO_DE_SORTE_REDIS_PASSWORD" | docker secret create REDIS_PASSWORD -
          printf "$CONEXAO_DE_SORTE_DATABASE_PASSWORD" | docker secret create DATABASE_PASSWORD -
          printf "$CONEXAO_DE_SORTE_JWT_SECRET" | docker secret create JWT_SECRET -
          printf "$CONEXAO_DE_SORTE_ENCRYPTION_MASTER_KEY" | docker secret create ENCRYPTION_MASTER_KEY -
          
          echo "Docker secrets created."

      - name: Set up JDK 25
        uses: actions/setup-java@v4
        with:
          java-version: '25'
          distribution: 'corretto'
          cache: maven

      - name: Build application
        shell: bash
        run: |
          set -Eeuo pipefail
          ./mvnw clean compile -DskipTests -B -q

      - name: Run tests
        shell: bash
        run: |
          set -Eeuo pipefail
          ./mvnw test -B -q

      - name: Build Docker image
        shell: bash
        run: |
          set -Eeuo pipefail
          docker build -t autenticacao:${{ github.sha }} .

      - name: Security scan with Trivy
        shell: bash
        run: |
          set -Eeuo pipefail
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image --exit-code 0 --severity HIGH,CRITICAL \
            autenticacao:${{ github.sha }} || true

      - name: Deploy to staging
        if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
        shell: bash
        run: |
          set -Eeuo pipefail

          # Deploy via Docker Compose with external secrets
          docker compose -f docker-compose.yml up -d --force-recreate

          # Health check
          timeout 180 bash -c 'until curl -f http://localhost:8081/actuator/health; do sleep 5; done'

          # Validate through Traefik health monitor
          health_monitor_url="https://traefik.conexaodesorte.com.br/health/service/autenticacao"
          timeout_total=300
          interval=10
          elapsed=0
          last_response=""
          status=""

          while [ $elapsed -lt $timeout_total ]; do
            echo "🔎 Consultando Traefik (${elapsed}/${timeout_total}s)..."
            response=$(curl -sf --max-time 10 "$health_monitor_url" 2>/dev/null || true)
            last_response="$response"

            if [[ -n "$response" ]]; then
              status=$(echo "$response" | jq -r '.status // "unknown"' 2>/dev/null || echo "unknown")
              status=${status//$'\n'/}
              echo "📊 Status reportado: ${status:-indefinido}"

              if [[ "$status" == "healthy" ]]; then
                echo "✅ Traefik confirmou Autenticacao como healthy"
                break
              fi
            else
              echo "⚠️ Traefik sem resposta nesta tentativa"
            fi

            sleep "$interval"
            elapsed=$((elapsed + interval))
          done

          if [[ "$status" != "healthy" ]]; then
            echo "❌ Traefik nao confirmou Autenticacao como healthy apos ${timeout_total}s"
            echo "📝 Ultima resposta recebida: ${last_response:-<sem resposta>}"
            exit 1
          fi

          echo "✅ Deployment successful - autenticacao service is healthy"
