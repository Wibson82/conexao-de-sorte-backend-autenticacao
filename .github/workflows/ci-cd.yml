name: "üöÄ Autenticacao - CI/CD Pipeline"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write
  packages: write # Permiss√£o para escrever no GitHub Container Registry

env:
  SERVICE_NAME: autenticacao
  TZ: America/Sao_Paulo
  STACK_NAME: conexao-autenticacao

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate-and-build:
    name: "Validate, Build and Push Image"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      image_name: ${{ steps.prep.outputs.image_name }}
      image_tag: ${{ github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare image tags
        id: prep
        run: |
          REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "image_name=ghcr.io/$REPO" >> $GITHUB_OUTPUT

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 25
        uses: actions/setup-java@v4
        with:
          java-version: '25'
          distribution: 'corretto'
          cache: maven

      - name: Build application (without tests)
        shell: bash
        run: |
          set -Eeuo pipefail
          ./mvnw clean compile -DskipTests -B -q

      - name: Run tests
        shell: bash
        run: |
          set -Eeuo pipefail
          ./mvnw test -B -q

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.prep.outputs.image_name }}:${{ github.sha }}

      - name: Security scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.prep.outputs.image_name }}:${{ github.sha }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'

  deploy-selfhosted:
    name: "Deploy to Self-Hosted Runner"
    needs: validate-and-build
    if: github.ref == 'refs/heads/main'
    runs-on: [self-hosted, Linux, X64, conexao-de-sorte-backend-autenticacao]
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get secrets for Docker Swarm
        shell: bash
        run: |
          echo "Fetching secrets from Azure Key Vault..."
          SECRETS_LIST=(
            "conexao-de-sorte-database-password"
            "conexao-de-sorte-redis-password"
            "conexao-de-sorte-jwt-secret"
            "conexao-de-sorte-encryption-master-key"
          )
          for secret_name in "${SECRETS_LIST[@]}"; do
            echo "Fetching secret: $secret_name"
            secret_value=$(az keyvault secret show --vault-name "${{ secrets.AZURE_KEYVAULT_NAME }}" --name "$secret_name" --query "value" -o tsv)
            if [[ -n "$secret_value" ]]; then
              echo "::add-mask::$secret_value"
              env_var_name=$(echo "$secret_name" | tr '-' '_' | tr '[:lower:]' '[:upper:]')
              echo "${env_var_name}=${secret_value}" >> $GITHUB_ENV
            else
              echo "Warning: Secret '$secret_name' not found."
            fi
          done

      - name: üîê Create Docker Secrets
        run: |
          echo "Creating Docker secrets..."
          docker secret rm REDIS_PASSWORD || true
          docker secret rm DATABASE_PASSWORD || true
          docker secret rm JWT_SECRET || true
          docker secret rm ENCRYPTION_MASTER_KEY || true
          printf "$CONEXAO_DE_SORTE_REDIS_PASSWORD" | docker secret create REDIS_PASSWORD -
          printf "$CONEXAO_DE_SORTE_DATABASE_PASSWORD" | docker secret create DATABASE_PASSWORD -
          printf "$CONEXAO_DE_SORTE_JWT_SECRET" | docker secret create JWT_SECRET -
          printf "$CONEXAO_DE_SORTE_ENCRYPTION_MASTER_KEY" | docker secret create ENCRYPTION_MASTER_KEY -
          echo "Docker secrets created."

      - name: Deploy to Staging
        env:
          IMAGE_NAME: ${{ needs.validate-and-build.outputs.image_name }}
          IMAGE_TAG: ${{ needs.validate-and-build.outputs.image_tag }}
        run: |
          set -Eeuo pipefail
          echo "Deploying image: ${IMAGE_NAME}:${IMAGE_TAG}"
          
          export IMAGE_TAG
          
          docker stack deploy -c docker-compose.yml --with-registry-auth "${STACK_NAME}"

      - name: üè• Verify Deployment on Runner
        run: |
          echo "Verifying deployment on runner..."
          timeout=180
          interval=10
          elapsed=0
          while [ $elapsed -lt $timeout ]; do
            echo "üîé Verifying containers for '${STACK_NAME}' (${elapsed}/${timeout}s)..."
            
            container_id=$(docker ps --filter "name=${STACK_NAME}" --filter "status=running" --format "{{.ID}}" | head -n 1)
            
            if [[ -n "$container_id" ]]; then
              health_status=$(docker inspect --format='{{.State.Health.Status}}' "$container_id" 2>/dev/null || echo "no-health-check")
              echo "Container '$container_id' found with health status: '$health_status'"
              
              if [[ "$health_status" == "healthy" ]]; then
                echo "‚úÖ Deployment successful! Container is healthy."
                exit 0
              fi
            else
              echo "‚ö†Ô∏è No running container found for '${STACK_NAME}' yet."
            fi
            
            sleep "$interval"
            elapsed=$((elapsed + interval))
          done
          
          echo "‚ùå Timeout: Deployment did not become healthy after ${timeout}s."
          docker service ls --filter name="${STACK_NAME}"
          exit 1