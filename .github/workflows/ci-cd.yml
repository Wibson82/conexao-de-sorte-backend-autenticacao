name: üîê Autenticacao Microservice - CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Destino do deploy'
        required: false
        default: 'production'
        type: choice
        options: [production]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  SERVICE_NAME: autenticacao
  TZ: America/Sao_Paulo

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'production' }}
  cancel-in-progress: false

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    name: üèóÔ∏è Build and Test
    steps:
      - uses: actions/checkout@v4
      - name: Setup Java 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'temurin'
          cache: maven
      - name: Verify Maven wrapper
        run: |
          chmod +x ./mvnw
          ./mvnw --version
      - name: Run unit tests
        run: ./mvnw clean test -Dspring.profiles.active=azure
      - name: Build application
        run: ./mvnw clean package -DskipTests -Dspring.profiles.active=azure
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: autenticacao-microservice-jar
          path: target/*.jar
          retention-days: 7

  build-image:
    runs-on: ubuntu-latest
    name: üê≥ Build Docker Image
    needs: build-and-test
    permissions:
      id-token: write
      contents: read
      packages: write
      attestations: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-name-lower: ${{ steps.image_name.outputs.image_name_lower }}
      image-tags: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4

      - name: Compute lowercase image name
        id: image_name
        run: |
          set -euo pipefail
          REPO='${{ env.IMAGE_NAME }}'
          echo "image_name_lower=$(echo "$REPO" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.image_name.outputs.image_name_lower }}
          tags: |
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYY-MM-DD-HHmmss'}}-{{sha}},enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Autenticacao Microservice
            org.opencontainers.image.description=Authentication and JWT management microservice
            org.opencontainers.image.service=${{ env.SERVICE_NAME }}

      - name: Build and push image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          sbom: true
          provenance: mode=max
          cache-from: type=gha
          cache-to: type=gha,mode=max
          network: host
          build-args: |
            SERVICE_NAME=${{ env.SERVICE_NAME }}
            BUILD_DATE=${{ github.event.head_commit.timestamp || github.run_id }}
            VCS_REF=${{ github.sha }}
            VERSION=1.0.0

  sign-image:
    runs-on: ubuntu-latest
    name: ‚úçÔ∏è Sign & Verify (100% OIDC keyless)
    needs: build-image
    permissions:
      id-token: write
      contents: read
      packages: write
      attestations: write
    steps:
      - name: Verify OIDC token availability
        run: |
          echo "üîç Verifying OIDC token is available..."
          if [ -z "${ACTIONS_ID_TOKEN_REQUEST_TOKEN:-}" ]; then
            echo "‚ùå OIDC token not available"
            exit 1
          fi
          echo "‚úÖ OIDC token is available"
          
      - name: Resolve image digest ref
        id: ref
        run: |
          set -euo pipefail
          IMG="ghcr.io/${{ needs.build-image.outputs.image-name-lower }}@${{ needs.build-image.outputs.image-digest }}"
          echo "lower=$(echo "$IMG" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

      - name: Install cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: v2.5.3

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull digest
        run: docker pull "${{ steps.ref.outputs.lower }}"

      - name: Sign (keyless OIDC)
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          echo "üîê Signing container image with OIDC keyless signature..."
          cosign sign --yes "${{ steps.ref.outputs.lower }}"

      - name: Verify OIDC signature
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          echo "‚úÖ Verifying OIDC keyless signature..."
          cosign verify \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            --certificate-identity-regexp "^https://github.com/${{ github.repository }}/\.github/workflows/.*@refs/heads/main$" \
            "${{ steps.ref.outputs.lower }}"
          echo "üéâ Container image signature verified successfully!"
          
      - name: Generate SBOM attestation (OIDC)
        env:
          COSIGN_EXPERIMENTAL: "1"  
        run: |
          echo "üìã Generating SBOM attestation with OIDC..."
          cosign attest --yes --type=spdxjson \
            --predicate=/dev/null \
            "${{ steps.ref.outputs.lower }}" || echo "SBOM attestation optional - continuing"


  deploy-production:
    needs: [build-image, sign-image]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
    name: üåü Deploy to Production (SSH remoto)
    permissions:
      id-token: write
      contents: read
      packages: read
    steps:
      - uses: actions/checkout@v4

      - name: Configurar SSH para deploy remoto
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -p ${{ secrets.VPS_SSH_PORT }} ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
          echo "‚úÖ SSH configurado"

      - name: Deploy remoto no servidor Hostinger
        env:
          IMAGE_REF: ghcr.io/${{ needs.build-image.outputs.image-name-lower }}@${{ needs.build-image.outputs.image-digest }}
        run: |
          set -euo pipefail
          echo "üöÄ Iniciando deploy remoto com imagem: $IMAGE_REF"
          ssh -i ~/.ssh/id_ed25519 -p ${{ secrets.VPS_SSH_PORT }} -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} << 'REMOTE'
          set -euo pipefail
          IMAGE_REF='${{ env.IMAGE_REF }}'
          CONTAINER_NAME='autenticacao-microservice'
          LOG_DIR="$HOME/conexao-logs/autenticacao"

          docker network inspect conexao-network >/dev/null 2>&1 || docker network create conexao-network

          # Login GHCR se credenciais existirem (opcional)
          if [ -n "${{ secrets.GHCR_USERNAME || '' }}" ] && [ -n "${{ secrets.GHCR_TOKEN || '' }}" ]; then
            echo "üîë Efetuando login no GHCR..."
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin || true
          fi

          echo "üì• Pull da imagem por digest"
          docker pull "$IMAGE_REF"

          if docker ps -q -f name=$CONTAINER_NAME | grep -q .; then
            docker tag $CONTAINER_NAME ${CONTAINER_NAME}:backup-$(date +%Y%m%d-%H%M%S) || true
          fi

          docker stop $CONTAINER_NAME || true
          docker rm $CONTAINER_NAME || true

          mkdir -p "$LOG_DIR"

          docker run -d \
            --name $CONTAINER_NAME \
            --network conexao-network \
            --restart unless-stopped \
            -p 8081:8081 \
            --health-cmd="curl -f http://localhost:8081/actuator/health || exit 1" \
            --health-interval=30s --health-timeout=10s --health-retries=3 --health-start-period=60s \
            -v "$LOG_DIR":/app/logs \
            -e JAVA_TOOL_OPTIONS="-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -Xms256m -Xmx1024m -Djava.security.egd=file:/dev/./urandom -Djava.awt.headless=true -Dfile.encoding=UTF-8" \
            -e SPRING_PROFILES_ACTIVE=prod,azure \
            -e ENVIRONMENT=production \
            -e SERVER_PORT=8081 \
            -e TZ=America/Sao_Paulo \
            -e AZURE_KEYVAULT_ENABLED=true \
            -e AZURE_KEYVAULT_ENDPOINT='${{ secrets.AZURE_KEYVAULT_ENDPOINT }}' \
            -e AZURE_CLIENT_ID='${{ secrets.AZURE_CLIENT_ID }}' \
            -e AZURE_CLIENT_SECRET='${{ secrets.AZURE_CLIENT_SECRET }}' \
            -e AZURE_TENANT_ID='${{ secrets.AZURE_TENANT_ID }}' \
            --label "traefik.enable=true" \
            --label "traefik.docker.network=conexao-network" \
            --label "traefik.http.routers.autenticacao.rule=Host(\`auth.conexaodesorte.com.br\`)" \
            --label "traefik.http.routers.autenticacao.entrypoints=websecure" \
            --label "traefik.http.routers.autenticacao.tls.certresolver=letsencrypt" \
            --label "traefik.http.services.autenticacao.loadbalancer.server.port=8081" \
            "$IMAGE_REF"

          echo "‚è≥ Aguardando sa√∫de do container"
          for i in $(seq 1 10); do
            if curl -fsS http://localhost:8081/actuator/health >/dev/null 2>&1; then
              echo "‚úÖ Container saud√°vel"
              break
            fi
            if [ "$i" -eq 10 ]; then
              echo "‚ùå Healthcheck falhou"
              docker logs $CONTAINER_NAME --tail 100 || true
              exit 1
            fi
            sleep 20
          done

          docker image prune -f --filter until=24h || true
          echo "‚úÖ Deploy conclu√≠do"
          REMOTE

  notify:
    runs-on: ubuntu-latest
    name: üì¢ Notification
    if: always()
    needs: [build-and-test, build-image, sign-image, deploy-production]
    steps:
      - uses: 8398a7/action-slack@v3
        if: always() && env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
          channel: '#ci-cd-notifications'
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              "username": "GitHub Actions",
              "icon_emoji": ":lock:",
              "attachments": [{
                "color": "${{ job.status }}" == "success" ? "good" : "${{ job.status }}" == "failure" ? "danger" : "warning",
                "fields": [{
                  "title": "üîê Autenticacao Microservice",
                  "value": "Status: ${{ job.status }}\nBranch: ${{ github.ref_name }}\nCommit: ${{ github.sha }}",
                  "short": true
                }]
              }]
            }
