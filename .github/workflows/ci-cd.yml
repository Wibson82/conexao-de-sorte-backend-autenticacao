name: "� Autenticacao – CI/CD Pipeline"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: "Destino do deploy"
        required: false
        default: "production"
        type: choice
        options: [ staging, production ]

# ----------------------------------------------------------------------
# PARÂMETROS GERAIS
# ----------------------------------------------------------------------

env:
  SERVICE_NAME: autenticacao
  TZ: America/Sao_Paulo

# Observação: IDs públicos (CLIENT_ID, TENANT_ID, SUBSCRIPTION_ID) devem
# ser cadastrados como **Repository Variables** (Settings ▸ Variables).
# Eles são lidos via `vars.<NAME>` — não via `secrets`.

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'production' }}
  cancel-in-progress: false

# ----------------------------------------------------------------------
# JOB 1 ▸ VALIDAÇÃO DO WORKSPACE
# ----------------------------------------------------------------------

jobs:
  validate-environment:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - name: "Guard: proibir r2dbc:h2 fora de testes"
        shell: bash
        run: |
          set -euo pipefail
          FOUND=$(grep -R --line-number --include='*.yml' --include='*.yaml' --include='*.properties' "r2dbc:h2" src || true)
          if echo "$FOUND" | grep -v "src/test/" | grep -q "r2dbc:h2"; then
            echo "❌ r2dbc:h2 encontrado fora de src/test" >&2
            echo "$FOUND" >&2
            exit 1
          fi

      - name: "Guard: dependência H2 não‑test"
        shell: bash
        run: |
          ./mvnw -q dependency:list -DincludeScope=compile -DoutputFile=deps.txt
          if grep -E "com.h2database:h2|io.r2dbc:r2dbc-h2" deps.txt; then
            echo "❌ H2 presente em scope de produção" >&2
            exit 1
          fi

# ----------------------------------------------------------------------
# JOB 2 ▸ BUILD + TEST + SAST/SCA
# ----------------------------------------------------------------------

  build-test-scan:
    needs: validate-environment
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4

      - name: Setup Java 24 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "24"
          cache: maven

      - name: Build + Test + Package
        run: ./mvnw package

      # - name: Build + Test + Cobertura (JaCoCo)
      #   run: ./mvnw verify -Pcoverage

      # - name: Upload cobertura
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: cobertura-jacoco
      #     path: target/site/jacoco
      #     retention-days: 7

      # - name: CodeQL init
      #   uses: github/codeql-action/init@v3
      #   with:
      #     languages: java

      # - name: CodeQL analyze
      #   uses: github/codeql-action/analyze@v3

      # - name: Trivy SCA (pom.xml)
      #   uses: aquasecurity/trivy-action@0.19.0
      #   with:
      #     scan-type: fs
      #     ignore-unfixed: true
      #     format: table
      #     severity: HIGH,CRITICAL

      - name: Upload JAR artefact
        uses: actions/upload-artifact@v4
        with:
          name: autenticacao-jar
          path: target/auth-users-*.jar
          retention-days: 1

# ----------------------------------------------------------------------
# JOB 3 ▸ BUILD DA IMAGEM + PUSH GHCR
# ----------------------------------------------------------------------

  build-image:
    needs: build-test-scan
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      packages: write
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Download JAR artefact
        uses: actions/download-artifact@v4
        with:
          name: autenticacao-jar
          path: target

      # ─── OIDC login no Azure para acessar Key Vault ───────────────────
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: false

      - name: Extrair senha DB (Key Vault) ▶ arquivo temporário
        id: secrets
        shell: bash
        run: |
          set -euo pipefail
          VAULT_ENDPOINT="${{ secrets.AZURE_KEYVAULT_ENDPOINT }}"
          if [[ "$VAULT_ENDPOINT" =~ https://([^.]+)\.vault\.azure\.net ]]; then
            VAULT="${BASH_REMATCH[1]}"
          else
            echo "ERROR: Invalid AZURE_KEYVAULT_ENDPOINT format: $VAULT_ENDPOINT" >&2
            exit 1
          fi
          
          echo "Loading secret from Azure Key Vault: $VAULT" >&2
          DB_PASS=$(az keyvault secret show --vault-name "$VAULT" --name conexao-de-sorte-database-password --query value -o tsv 2>/dev/null)
          if [ $? -ne 0 ] || [ -z "$DB_PASS" ]; then
            echo "ERROR: Secret conexao-de-sorte-database-password not found in Azure Key Vault $VAULT" >&2
            exit 1
          fi
          echo "::add-mask::$DB_PASS"
          printf "%s" "$DB_PASS" > db_pass.txt

      # ─── Login no GHCR ────────────────────────────────────────────────
      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push
        id: build
        run: |
          IMAGE=ghcr.io/${{ github.repository }}/autenticacao:${{ github.sha }}
          docker buildx build \
            --tag "$IMAGE" \
            --push \
            --provenance=true \
            --sbom=true \
            --secret id=db_password,src=db_pass.txt \
            --file Dockerfile .
          rm -f db_pass.txt
          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"

# ----------------------------------------------------------------------
# JOB 4 ▸ DEPLOY SELF‑HOSTED (Docker Swarm + secrets)
# ----------------------------------------------------------------------

  deploy-selfhosted:
    needs: build-image
    runs-on: [ self-hosted, Linux, X64, conexao, conexao-de-sorte-backend-autenticacao ]
    timeout-minutes: 30
    if: |
      github.ref == 'refs/heads/main' &&
      (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production'))
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Pull image do GHCR
        run: docker pull "${{ needs.build-image.outputs.image }}"

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: false

      - name: Provisionar secret runtime
        shell: bash
        run: |
          set -euo pipefail
          VAULT_ENDPOINT="${{ secrets.AZURE_KEYVAULT_ENDPOINT }}"
          if [[ "$VAULT_ENDPOINT" =~ https://([^.]+)\.vault\.azure\.net ]]; then
            VAULT="${BASH_REMATCH[1]}"
          else
            echo "ERROR: Invalid AZURE_KEYVAULT_ENDPOINT format: $VAULT_ENDPOINT" >&2
            exit 1
          fi
          
          echo "Loading secret from Azure Key Vault: $VAULT" >&2
          DB_PASS=$(az keyvault secret show --vault-name "$VAULT" --name conexao-de-sorte-database-password --query value -o tsv 2>/dev/null)
          if [ $? -ne 0 ] || [ -z "$DB_PASS" ]; then
            echo "ERROR: Secret conexao-de-sorte-database-password not found in Azure Key Vault $VAULT" >&2
            exit 1
          fi
          printf "%s" "$DB_PASS" | docker secret create db_password - 2>/dev/null || docker secret update db_password -

      - name: Deploy via docker stack
        run: |
          STACK=conexao
          IMAGE="${{ needs.build-image.outputs.image }}"
          cat <<EOF | docker stack deploy --with-registry-auth -c - $STACK
          version: "3.9"
          services:
            autenticacao:
              image: $IMAGE
              secrets:
                - db_password
              environment:
                SPRING_PROFILES_ACTIVE: prod,azure
                TZ: America/Sao_Paulo
              deploy:
                restart_policy:
                  condition: on-failure
                replicas: 1
          secrets:
            db_password:
              external: true
          EOF

      - name: Health‑check
        run: docker service ls | grep autenticacao

# ----------------------------------------------------------------------
# JOB 5 ▸ NOTIFY
# ----------------------------------------------------------------------

  notify:
    if: always()
    runs-on: ubuntu-latest
    needs: [ build-test-scan, deploy-selfhosted ]
    steps:
      - name: Slack notify
        env:
          WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          RESULT: ${{ needs.deploy-selfhosted.result }}
        shell: bash
        run: |
          if [ -z "$WEBHOOK" ]; then
            echo "ℹ️ Slack webhook não configurado; etapa ignorada" && exit 0
          fi
          COLOR=good && [ "$RESULT" != "success" ] && COLOR=danger
          curl -X POST -H 'Content-type: application/json' \
               --data "{\"text\":\"Autenticacao – $RESULT\",\"attachments\":[{\"color\":\"$COLOR\"}]}" \
               "$WEBHOOK"
