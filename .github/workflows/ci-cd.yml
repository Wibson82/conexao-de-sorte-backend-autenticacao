name: 🔐 Autenticacao Microservice - CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Destino do deploy'
        required: false
        default: 'production'
        type: choice
        options: [production]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  SERVICE_NAME: autenticacao
  TZ: America/Sao_Paulo

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'production' }}
  cancel-in-progress: false

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    name: 🏗️ Build and Test
    steps:
      - uses: actions/checkout@v4
      - name: Setup Java 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'temurin'
          cache: maven
      - name: Verify Maven wrapper
        run: |
          chmod +x ./mvnw
          ./mvnw --version
      - name: Run unit tests
        run: ./mvnw clean test -Dspring.profiles.active=azure
      - name: Build application
        run: ./mvnw clean package -DskipTests -Dspring.profiles.active=azure
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: autenticacao-microservice-jar
          path: target/*.jar
          retention-days: 7

  build-image:
    runs-on: ubuntu-latest
    name: 🐳 Build Docker Image
    needs: build-and-test
    permissions:
      id-token: write
      contents: read
      packages: write
      attestations: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-name-lower: ${{ steps.image_name.outputs.image_name_lower }}
      image-tags: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4

      - name: Compute lowercase image name
        id: image_name
        run: |
          set -euo pipefail
          REPO='${{ env.IMAGE_NAME }}'
          echo "image_name_lower=$(echo "$REPO" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.image_name.outputs.image_name_lower }}
          tags: |
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYY-MM-DD-HHmmss'}}-{{sha}},enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Autenticacao Microservice
            org.opencontainers.image.description=Authentication and JWT management microservice
            org.opencontainers.image.service=${{ env.SERVICE_NAME }}

      - name: Build and push image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          sbom: true
          provenance: mode=max
          cache-from: type=gha
          cache-to: type=gha,mode=max
          network: host
          build-args: |
            SERVICE_NAME=${{ env.SERVICE_NAME }}
            BUILD_DATE=${{ github.event.head_commit.timestamp || github.run_id }}
            VCS_REF=${{ github.sha }}
            VERSION=1.0.0

  sign-image:
    runs-on: ubuntu-latest
    name: ✍️ Sign & Verify (100% OIDC keyless)
    needs: build-image
    permissions:
      id-token: write
      contents: read
      packages: write
      attestations: write
    steps:
      - name: Verify OIDC token availability
        run: |
          echo "🔍 Verifying OIDC token is available..."
          if [ -z "${ACTIONS_ID_TOKEN_REQUEST_TOKEN:-}" ]; then
            echo "❌ OIDC token not available"
            exit 1
          fi
          echo "✅ OIDC token is available"
          
      - name: Resolve image digest ref
        id: ref
        run: |
          set -euo pipefail
          IMG="ghcr.io/${{ needs.build-image.outputs.image-name-lower }}@${{ needs.build-image.outputs.image-digest }}"
          echo "lower=$(echo "$IMG" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

      - name: Install cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: v2.5.3

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull digest
        run: docker pull "${{ steps.ref.outputs.lower }}"

      - name: Sign (keyless OIDC)
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          echo "🔐 Signing container image with OIDC keyless signature..."
          cosign sign --yes "${{ steps.ref.outputs.lower }}"

      - name: Verify OIDC signature
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          echo "✅ Verifying OIDC keyless signature..."
          cosign verify \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            --certificate-identity-regexp "^https://github.com/${{ github.repository }}/\.github/workflows/.*@refs/heads/main$" \
            "${{ steps.ref.outputs.lower }}"
          echo "🎉 Container image signature verified successfully!"
          
      - name: Generate SBOM attestation (OIDC)
        env:
          COSIGN_EXPERIMENTAL: "1"  
        run: |
          echo "📋 Generating SBOM attestation with OIDC..."
          cosign attest --yes --type=spdxjson \
            --predicate=/dev/null \
            "${{ steps.ref.outputs.lower }}" || echo "SBOM attestation optional - continuing"


  deploy-production:
    needs: [build-image, sign-image]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
    name: 🌟 Deploy to Production
    permissions:
      id-token: write
      contents: read
      packages: read
    steps:
      - uses: actions/checkout@v4

      - name: 🔐 Validar e configurar SSH
        run: |
          set -euo pipefail
          
          echo "🔍 Validando secrets SSH necessários..."
          
          # Validar se todos os secrets SSH estão configurados
          if [[ -z "${{ secrets.VPS_SSH_KEY }}" ]]; then
            echo "❌ ERRO: Secret VPS_SSH_KEY não está configurado"
            echo "📋 Configure os seguintes secrets no repositório:"
            echo "   - VPS_SSH_KEY (chave privada SSH)"
            echo "   - VPS_SSH_PORT (porta SSH do servidor)"
            echo "   - VPS_HOST (IP/hostname do servidor)"
            echo "   - VPS_USERNAME (nome do usuário SSH)"
            exit 1
          fi
          
          if [[ -z "${{ secrets.VPS_SSH_PORT }}" ]]; then
            echo "❌ ERRO: Secret VPS_SSH_PORT não está configurado"
            exit 1
          fi
          
          if [[ -z "${{ secrets.VPS_HOST }}" ]]; then
            echo "❌ ERRO: Secret VPS_HOST não está configurado"
            exit 1
          fi
          
          if [[ -z "${{ secrets.VPS_USERNAME }}" ]]; then
            echo "❌ ERRO: Secret VPS_USERNAME não está configurado"
            exit 1
          fi
          
          echo "✅ Todos os secrets SSH estão configurados"
          
          # Configurar SSH
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -p ${{ secrets.VPS_SSH_PORT }} ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
          echo "✅ SSH configurado com sucesso"

      - name: 📊 Validar variáveis de deploy
        run: |
          set -euo pipefail
          echo "🔍 Validando variáveis de deploy..."
          echo "   - IMAGE_NAME: [${{ env.IMAGE_NAME }}]"
          echo "   - SERVICE_NAME: [${{ env.SERVICE_NAME }}]"
          echo "   - REGISTRY: [${{ env.REGISTRY }}]"
          
          IMAGE_DIGEST="${{ needs.build-image.outputs.image-digest }}"
          IMAGE_NAME_LOWER="${{ needs.build-image.outputs.image-name-lower }}"
          
          if [[ -z "${IMAGE_DIGEST}" ]]; then
            echo "❌ ERRO: IMAGE_DIGEST não está definido"
            exit 1
          fi
          if [[ -z "${IMAGE_NAME_LOWER}" ]]; then
            echo "❌ ERRO: IMAGE_NAME_LOWER não está definido"
            exit 1
          fi
          
          FULL_IMAGE="ghcr.io/${IMAGE_NAME_LOWER}@${IMAGE_DIGEST}"
          echo "FULL_IMAGE=${FULL_IMAGE}" >> $GITHUB_ENV
          echo "✅ Imagem final: ${FULL_IMAGE}"

      - name: 🛑 Limpeza de containers antigos
        run: |
          set -euo pipefail
          echo "🧹 Limpando containers antigos do auth-microservice..."

          ssh -i ~/.ssh/id_ed25519 -p ${{ secrets.VPS_SSH_PORT }} -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "
            set -euo pipefail
            echo '🔍 Verificando containers existentes...'

            # Parar e remover container específico
            if docker ps -a --format '{{.Names}}' | grep -q '^auth-microservice$'; then
              echo '🛑 Parando container: auth-microservice'
              docker stop 'auth-microservice' || true
              echo '🗑️ Removendo container: auth-microservice'
              docker rm 'auth-microservice' || true
            else
              echo '✅ Nenhum container auth-microservice encontrado'
            fi
          "
          echo "✅ Limpeza concluída"

      - name: 🚀 Deploy remoto do microsserviço de autenticação
        run: |
          set -euo pipefail
          echo "🚀 Iniciando deploy remoto do microsserviço de autenticação..."
          echo "   - Imagem: ${{ env.FULL_IMAGE }}"

          # Executar deploy no servidor remoto via SSH
          ssh -i ~/.ssh/id_ed25519 -p ${{ secrets.VPS_SSH_PORT }} -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} << 'REMOTE_SCRIPT'
          set -euo pipefail
          export TZ=America/Sao_Paulo

          # Variáveis do deploy
          FULL_IMAGE="${{ env.FULL_IMAGE }}"
          CONTAINER_NAME="auth-microservice"
          SERVER_PORT="8081"

          echo "🔍 Variáveis recebidas no servidor:"
          echo "   - FULL_IMAGE: [${FULL_IMAGE}]"
          echo "   - CONTAINER_NAME: [${CONTAINER_NAME}]"
          echo "   - SERVER_PORT: [${SERVER_PORT}]"

          echo "🔑 Fazendo login no GitHub Container Registry..."
          echo '${{ secrets.GITHUB_TOKEN }}' | docker login ghcr.io -u '${{ github.actor }}' --password-stdin

          echo "📥 Baixando imagem: ${FULL_IMAGE}"
          docker pull "${FULL_IMAGE}"

          echo "🌐 Criando rede Docker se não existir..."
          docker network create conexao-network 2>/dev/null || true

          echo "📁 Criando diretório de logs..."
          mkdir -p $HOME/conexao-logs/auth-microservice

          echo "🚀 Iniciando container do microsserviço de autenticação..."
          docker run -d \
            --name "${CONTAINER_NAME}" \
            --network conexao-network \
            --restart unless-stopped \
            -p "${SERVER_PORT}:${SERVER_PORT}" \
            --health-cmd="curl -f http://localhost:${SERVER_PORT}/api/v1/auth/actuator/health || exit 1" \
            --health-interval=60s \
            --health-timeout=30s \
            --health-retries=3 \
            --health-start-period=120s \
            -v $HOME/conexao-logs/auth-microservice:/app/logs \
            -e SPRING_PROFILES_ACTIVE=azure \
            -e ENVIRONMENT=production \
            -e SERVER_PORT="${SERVER_PORT}" \
            -e AZURE_KEYVAULT_ENABLED=true \
            -e AZURE_KEYVAULT_ENDPOINT='${{ secrets.AZURE_KEYVAULT_ENDPOINT }}' \
            -e AZURE_CLIENT_ID='${{ secrets.AZURE_CLIENT_ID }}' \
            -e AZURE_CLIENT_SECRET='${{ secrets.AZURE_CLIENT_SECRET }}' \
            -e AZURE_TENANT_ID='${{ secrets.AZURE_TENANT_ID }}' \
            -e SPRING_R2DBC_URL='${{ secrets.CONEXAO_DE_SORTE_DATABASE_R2DBC_URL }}' \
            -e SPRING_R2DBC_USERNAME='${{ secrets.CONEXAO_DE_SORTE_DATABASE_USERNAME }}' \
            -e SPRING_R2DBC_PASSWORD='${{ secrets.AUTH_DB_PASSWORD }}' \
            -e SPRING_DATA_REDIS_HOST='${{ secrets.CONEXAO_DE_SORTE_REDIS_HOST }}' \
            -e SPRING_DATA_REDIS_PORT='${{ secrets.CONEXAO_DE_SORTE_REDIS_PORT }}' \
            -e SPRING_DATA_REDIS_PASSWORD='${{ secrets.REDIS_PASSWOR }}' \
            -e SPRING_DATA_REDIS_DATABASE='${{ secrets.CONEXAO_DE_SORTE_REDIS_DATABASE }}' \
            -e JWT_SECRET_KEY='${{ secrets.JWT_SECRET_KEY }}' \
            -e TZ=America/Sao_Paulo \
            --label "traefik.enable=true" \
            --label "traefik.docker.network=conexao-network" \
            --label "traefik.http.routers.auth-microservice.rule=Host(\`auth.conexaodesorte.com.br\`)" \
            --label "traefik.http.routers.auth-microservice.entrypoints=websecure" \
            --label "traefik.http.routers.auth-microservice.tls.certresolver=letsencrypt" \
            --label "traefik.http.services.auth-microservice.loadbalancer.server.port=${SERVER_PORT}" \
            "${FULL_IMAGE}"

          echo "✅ Deploy concluído com sucesso!"
          echo "📦 Container: $(docker ps --filter name=${CONTAINER_NAME} --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}')"
          REMOTE_SCRIPT

      - name: ✅ Verificar saúde do serviço
        run: |
          echo "🔍 Verificando saúde do microsserviço de autenticação..."
          
          # Aguardar um pouco para o container inicializar
          sleep 30
          
          # Verificar via SSH se o serviço está respondendo
          ssh -i ~/.ssh/id_ed25519 -p ${{ secrets.VPS_SSH_PORT }} -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "
            echo '🔍 Testando health check do auth-microservice...'
            for i in \$(seq 1 10); do
              echo \"⏳ Tentativa \$i/10...\"
              if curl -fsS http://localhost:8081/api/v1/auth/actuator/health >/dev/null 2>&1; then
                echo '✅ Auth microservice está saudável!'
                exit 0
              fi
              sleep 10
            done
            echo '❌ Health check falhou após 10 tentativas'
            echo '📋 Logs do container (últimas 50 linhas):'
            docker logs auth-microservice --tail 50 || true
            exit 1
          "

  notify:
    runs-on: ubuntu-latest
    name: 📢 Notification
    if: always()
    needs: [build-and-test, build-image, sign-image, deploy-production]
    steps:
      - uses: 8398a7/action-slack@v3
        if: always() && env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
          channel: '#ci-cd-notifications'
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              "username": "GitHub Actions",
              "icon_emoji": ":lock:",
              "attachments": [{
                "color": "${{ job.status }}" == "success" ? "good" : "${{ job.status }}" == "failure" ? "danger" : "warning",
                "fields": [{
                  "title": "🔐 Autenticacao Microservice",
                  "value": "Status: ${{ job.status }}\nBranch: ${{ github.ref_name }}\nCommit: ${{ github.sha }}",
                  "short": true
                }]
              }]
            }
