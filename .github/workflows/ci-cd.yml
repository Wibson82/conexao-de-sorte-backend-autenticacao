name: "üöÄ Autenticacao - CI/CD Pipeline"

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]
  workflow_dispatch:
    inputs:
      environment:
        description: "Destino do deploy"
        required: false
        default: "staging"
        type: choice
        options: [ staging, production ]

# ----------------------------------------------------------------------
# PERMISS√ïES M√çNIMAS OIDC
# ----------------------------------------------------------------------

permissions:
  contents: read
  id-token: write

# ----------------------------------------------------------------------
# PAR√ÇMETROS GERAIS
# ----------------------------------------------------------------------

env:
  SERVICE_NAME: autenticacao
  TZ: America/Sao_Paulo

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'staging' }}
  cancel-in-progress: false

# ----------------------------------------------------------------------
# JOBS
# ----------------------------------------------------------------------

jobs:
  build_and_deploy_backend:
    runs-on: [self-hosted, Linux, X64]
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get required Key Vault secrets (minimal and explicit)
        id: kv
        uses: azure/get-keyvault-secrets@v1
        with:
          keyvault: ${{ secrets.AZURE_KEYVAULT_NAME }}
          secrets: |
            conexao-de-sorte-database-r2dbc-url
            conexao-de-sorte-database-jdbc-url
            conexao-de-sorte-database-username
            conexao-de-sorte-database-password
            conexao-de-sorte-redis-host
            conexao-de-sorte-redis-port
            conexao-de-sorte-redis-password
            conexao-de-sorte-redis-database
            conexao-de-sorte-jwt-secret
            conexao-de-sorte-jwt-signing-key
            conexao-de-sorte-jwt-verification-key
            conexao-de-sorte-jwt-key-id
            conexao-de-sorte-jwt-issuer
            conexao-de-sorte-jwt-privateKey
            conexao-de-sorte-jwt-publicKey
            conexao-de-sorte-cors-allowed-origins
            conexao-de-sorte-cors-allow-credentials
            conexao-de-sorte-encryption-master-key
            conexao-de-sorte-server-port

      - name: Mask sensitive values
        shell: bash
        run: |
          set -Eeuo pipefail
          echo ::add-mask::"${{ steps.kv.outputs.conexao-de-sorte-database-password }}"
          echo ::add-mask::"${{ steps.kv.outputs.conexao-de-sorte-redis-password }}"
          echo ::add-mask::"${{ steps.kv.outputs.conexao-de-sorte-jwt-secret }}"
          echo ::add-mask::"${{ steps.kv.outputs.conexao-de-sorte-jwt-signing-key }}"
          echo ::add-mask::"${{ steps.kv.outputs.conexao-de-sorte-jwt-verification-key }}"
          echo ::add-mask::"${{ steps.kv.outputs.conexao-de-sorte-jwt-privateKey }}"
          echo ::add-mask::"${{ steps.kv.outputs.conexao-de-sorte-encryption-master-key }}"

      - name: üîê Criar Docker Secrets from Azure Key Vault
        run: |
          set -euo pipefail
          echo "üîê Criando Docker Secrets a partir dos valores do Azure Key Vault..."

          # Lista de secrets essenciais para injetar no Docker Swarm
          secrets_list="conexao-de-sorte-database-r2dbc-url,conexao-de-sorte-database-username,conexao-de-sorte-database-password,conexao-de-sorte-redis-host,conexao-de-sorte-redis-port,conexao-de-sorte-redis-password,conexao-de-sorte-redis-database,conexao-de-sorte-jwt-secret,conexao-de-sorte-jwt-issuer,conexao-de-sorte-server-port"

          IFS=',' read -ra SECRETS_ARRAY <<< "$secrets_list"
          created_secrets=0

          for secret_name in "${SECRETS_ARRAY[@]}"; do
            # Converter nome do secret para sa√≠da do step Key Vault
            kv_output_name=$(echo "$secret_name" | tr '[:upper:]' '[:lower:]' | tr '_' '-')
            secret_value=""

            # Obter valor do Key Vault outputs
            case "$secret_name" in
              "conexao-de-sorte-database-r2dbc-url") secret_value="${{ steps.kv.outputs.conexao-de-sorte-database-r2dbc-url }}" ;;
              "conexao-de-sorte-database-username") secret_value="${{ steps.kv.outputs.conexao-de-sorte-database-username }}" ;;
              "conexao-de-sorte-database-password") secret_value="${{ steps.kv.outputs.conexao-de-sorte-database-password }}" ;;
              "conexao-de-sorte-redis-host") secret_value="${{ steps.kv.outputs.conexao-de-sorte-redis-host }}" ;;
              "conexao-de-sorte-redis-port") secret_value="${{ steps.kv.outputs.conexao-de-sorte-redis-port }}" ;;
              "conexao-de-sorte-redis-password") secret_value="${{ steps.kv.outputs.conexao-de-sorte-redis-password }}" ;;
              "conexao-de-sorte-redis-database") secret_value="${{ steps.kv.outputs.conexao-de-sorte-redis-database }}" ;;
              "conexao-de-sorte-jwt-secret") secret_value="${{ steps.kv.outputs.conexao-de-sorte-jwt-secret }}" ;;
              "conexao-de-sorte-jwt-issuer") secret_value="${{ steps.kv.outputs.conexao-de-sorte-jwt-issuer }}" ;;
              "conexao-de-sorte-server-port") secret_value="${{ steps.kv.outputs.conexao-de-sorte-server-port }}" ;;
            esac

            if [[ -n "$secret_value" ]]; then
              echo "üîê Criando Docker Secret: $secret_name"

              # Remover secret existente se houver
              if docker secret inspect "$secret_name" >/dev/null 2>&1; then
                echo "üóëÔ∏è Removendo secret existente: $secret_name"
                docker secret rm "$secret_name" || true
                sleep 1
              fi

              # Criar novo secret
              echo -n "$secret_value" | docker secret create "$secret_name" -
              echo "‚úÖ Docker Secret criado: $secret_name"
              ((created_secrets++))
            else
              echo "‚ö†Ô∏è Secret $secret_name n√£o encontrado no Key Vault"
            fi
          done

          echo "‚úÖ Total de Docker Secrets criados: $created_secrets/${#SECRETS_ARRAY[@]}"

          if [[ $created_secrets -lt 5 ]]; then
            echo "‚ùå Poucos secrets criados - deploy pode falhar"
            exit 1
          fi

      - name: Set up JDK 25
        uses: actions/setup-java@v4
        with:
          java-version: '25'
          distribution: 'corretto'
          cache: maven

      - name: Build application
        shell: bash
        run: |
          set -Eeuo pipefail
          ./mvnw clean compile -DskipTests -B -q

      - name: Run tests
        shell: bash
        run: |
          set -Eeuo pipefail
          ./mvnw test -B -q

      - name: Build Docker image
        shell: bash
        run: |
          set -Eeuo pipefail
          docker build -t autenticacao:${{ github.sha }} .

      - name: Security scan with Trivy
        shell: bash
        run: |
          set -Eeuo pipefail
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image --exit-code 0 --severity HIGH,CRITICAL \
            autenticacao:${{ github.sha }} || true

      - name: Deploy to staging
        if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
        shell: bash
        env:
          DATABASE_R2DBC_URL: ${{ steps.kv.outputs.conexao-de-sorte-database-r2dbc-url }}
          DATABASE_JDBC_URL: ${{ steps.kv.outputs.conexao-de-sorte-database-jdbc-url }}
          DATABASE_USERNAME: ${{ steps.kv.outputs.conexao-de-sorte-database-username }}
          DATABASE_PASSWORD: ${{ steps.kv.outputs.conexao-de-sorte-database-password }}
          REDIS_HOST: ${{ steps.kv.outputs.conexao-de-sorte-redis-host }}
          REDIS_PORT: ${{ steps.kv.outputs.conexao-de-sorte-redis-port }}
          REDIS_PASSWORD: ${{ steps.kv.outputs.conexao-de-sorte-redis-password }}
          REDIS_DATABASE: ${{ steps.kv.outputs.conexao-de-sorte-redis-database }}
          JWT_SECRET: ${{ steps.kv.outputs.conexao-de-sorte-jwt-secret }}
          JWT_SIGNING_KEY: ${{ steps.kv.outputs.conexao-de-sorte-jwt-signing-key }}
          JWT_VERIFICATION_KEY: ${{ steps.kv.outputs.conexao-de-sorte-jwt-verification-key }}
          JWT_KEY_ID: ${{ steps.kv.outputs.conexao-de-sorte-jwt-key-id }}
          JWT_ISSUER: ${{ steps.kv.outputs.conexao-de-sorte-jwt-issuer }}
          JWT_PRIVATE_KEY: ${{ steps.kv.outputs.conexao-de-sorte-jwt-privateKey }}
          JWT_PUBLIC_KEY: ${{ steps.kv.outputs.conexao-de-sorte-jwt-publicKey }}
          CORS_ALLOWED_ORIGINS: ${{ steps.kv.outputs.conexao-de-sorte-cors-allowed-origins }}
          CORS_ALLOW_CREDENTIALS: ${{ steps.kv.outputs.conexao-de-sorte-cors-allow-credentials }}
          ENCRYPTION_MASTER_KEY: ${{ steps.kv.outputs.conexao-de-sorte-encryption-master-key }}
          SERVER_PORT: ${{ steps.kv.outputs.conexao-de-sorte-server-port }}
        run: |
          set -Eeuo pipefail

          # Deploy via Docker Compose with external secrets
          docker compose -f docker-compose.yml up -d --force-recreate

          # Health check
          timeout 180 bash -c 'until curl -f http://localhost:8081/actuator/health; do sleep 5; done'

          # Validate through Traefik health monitor
          health_monitor_url="https://traefik.conexaodesorte.com.br/health/service/autenticacao"
          timeout_total=300
          interval=10
          elapsed=0
          last_response=""
          status=""

          while [ $elapsed -lt $timeout_total ]; do
            echo "üîé Consultando Traefik (${elapsed}/${timeout_total}s)..."
            response=$(curl -sf --max-time 10 "$health_monitor_url" 2>/dev/null || true)
            last_response="$response"

            if [[ -n "$response" ]]; then
              status=$(echo "$response" | jq -r '.status // "unknown"' 2>/dev/null || echo "unknown")
              status=${status//$'\n'/}
              echo "üìä Status reportado: ${status:-indefinido}"

              if [[ "$status" == "healthy" ]]; then
                echo "‚úÖ Traefik confirmou Autenticacao como healthy"
                break
              fi
            else
              echo "‚ö†Ô∏è Traefik sem resposta nesta tentativa"
            fi

            sleep "$interval"
            elapsed=$((elapsed + interval))
          done

          if [[ "$status" != "healthy" ]]; then
            echo "‚ùå Traefik nao confirmou Autenticacao como healthy apos ${timeout_total}s"
            echo "üìù Ultima resposta recebida: ${last_response:-<sem resposta>}"
            exit 1
          fi

          echo "‚úÖ Deployment successful - autenticacao service is healthy"
