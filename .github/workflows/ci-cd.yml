name: "ÔøΩ Autenticacao ‚Äì CI/CD Pipeline"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: "Destino do deploy"
        required: false
        default: "production"
        type: choice
        options: [ staging, production ]

# ----------------------------------------------------------------------
# PAR√ÇMETROS GERAIS
# ----------------------------------------------------------------------

env:
  SERVICE_NAME: autenticacao
  TZ: America/Sao_Paulo

# Observa√ß√£o: IDs p√∫blicos (CLIENT_ID, TENANT_ID, SUBSCRIPTION_ID) devem
# ser cadastrados como **Repository Variables** (Settings ‚ñ∏ Variables).
# Eles s√£o lidos via `vars.<NAME>` ‚Äî n√£o via `secrets`.

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'production' }}
  cancel-in-progress: false

# ----------------------------------------------------------------------
# JOB 1 ‚ñ∏ VALIDA√á√ÉO DO WORKSPACE
# ----------------------------------------------------------------------

jobs:
  validate-environment:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - name: "Guard: proibir r2dbc:h2 fora de testes"
        shell: bash
        run: |
          set -euo pipefail
          FOUND=$(grep -R --line-number --include='*.yml' --include='*.yaml' --include='*.properties' "r2dbc:h2" src || true)
          if echo "$FOUND" | grep -v "src/test/" | grep -q "r2dbc:h2"; then
            echo "‚ùå r2dbc:h2 encontrado fora de src/test" >&2
            echo "$FOUND" >&2
            exit 1
          fi

      - name: "Guard: depend√™ncia H2 n√£o‚Äëtest"
        shell: bash
        run: |
          ./mvnw -q dependency:list -DincludeScope=compile -DoutputFile=deps.txt
          if grep -E "com.h2database:h2|io.r2dbc:r2dbc-h2" deps.txt; then
            echo "‚ùå H2 presente em scope de produ√ß√£o" >&2
            exit 1
          fi

# ----------------------------------------------------------------------
# JOB 2 ‚ñ∏ BUILD + TEST + SAST/SCA
# ----------------------------------------------------------------------

  build-test-scan:
    needs: validate-environment
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4

      - name: Setup Java 24 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "24"
          cache: maven

      - name: Build + Test + Package
        run: ./mvnw package

      # - name: Build + Test + Cobertura (JaCoCo)
      #   run: ./mvnw verify -Pcoverage

      # - name: Upload cobertura
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: cobertura-jacoco
      #     path: target/site/jacoco
      #     retention-days: 7

      # - name: CodeQL init
      #   uses: github/codeql-action/init@v3
      #   with:
      #     languages: java

      # - name: CodeQL analyze
      #   uses: github/codeql-action/analyze@v3

      # - name: Trivy SCA (pom.xml)
      #   uses: aquasecurity/trivy-action@0.19.0
      #   with:
      #     scan-type: fs
      #     ignore-unfixed: true
      #     format: table
      #     severity: HIGH,CRITICAL

      - name: Upload JAR artefact
        uses: actions/upload-artifact@v4
        with:
          name: autenticacao-jar
          path: target/auth-users-*.jar
          retention-days: 1

# ----------------------------------------------------------------------
# JOB 3 ‚ñ∏ BUILD DA IMAGEM + PUSH GHCR
# ----------------------------------------------------------------------

  build-image:
    needs: build-test-scan
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      image: ${{ steps.build.outputs.image }}
    permissions:
      packages: write
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Download JAR artefact
        uses: actions/download-artifact@v4
        with:
          name: autenticacao-jar
          path: target

      # ‚îÄ‚îÄ‚îÄ OIDC login no Azure para acessar Key Vault ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: false

      - name: Extrair senha DB (Key Vault) ‚ñ∂ arquivo tempor√°rio
        id: secrets
        shell: bash
        run: |
          set -euo pipefail
          VAULT_ENDPOINT="${{ secrets.AZURE_KEYVAULT_ENDPOINT }}"
          if [[ "$VAULT_ENDPOINT" =~ https://([^.]+)\.vault\.azure\.net ]]; then
            VAULT="${BASH_REMATCH[1]}"
          else
            echo "ERROR: Invalid AZURE_KEYVAULT_ENDPOINT format: $VAULT_ENDPOINT" >&2
            exit 1
          fi
          
          echo "Loading secret from Azure Key Vault: $VAULT" >&2
          DB_PASS=$(az keyvault secret show --vault-name "$VAULT" --name conexao-de-sorte-database-password --query value -o tsv 2>/dev/null)
          if [ $? -ne 0 ] || [ -z "$DB_PASS" ]; then
            echo "ERROR: Secret conexao-de-sorte-database-password not found in Azure Key Vault $VAULT" >&2
            exit 1
          fi
          echo "::add-mask::$DB_PASS"
          printf "%s" "$DB_PASS" > db_pass.txt

      # ‚îÄ‚îÄ‚îÄ Login no GHCR ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push
        id: build
        run: |
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          IMAGE=ghcr.io/$REPO_LOWER/autenticacao:${{ github.sha }}
          docker buildx build \
            --tag "$IMAGE" \
            --push \
            --provenance=true \
            --sbom=true \
            --secret id=db_password,src=db_pass.txt \
            --file Dockerfile .
          rm -f db_pass.txt
          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"

# ----------------------------------------------------------------------
# JOB 4 ‚ñ∏ DEPLOY SELF‚ÄëHOSTED (Docker Swarm + secrets)
# ----------------------------------------------------------------------

  deploy-selfhosted:
    needs: build-image
    runs-on: [ self-hosted, Linux, X64, conexao, conexao-de-sorte-backend-autenticacao ]
    timeout-minutes: 30
    if: |
      github.ref == 'refs/heads/main' &&
      (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production'))
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Login GHCR (Self-hosted)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull image do GHCR
        run: docker pull "${{ needs.build-image.outputs.image }}"

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: false

      - name: Carregar todos os segredos do Azure Key Vault
        shell: bash
        run: |
          set -euo pipefail
          VAULT_ENDPOINT="${{ secrets.AZURE_KEYVAULT_ENDPOINT }}"
          if [[ "$VAULT_ENDPOINT" =~ https://([^.]+)\.vault\.azure\.net ]]; then
            VAULT="${BASH_REMATCH[1]}"
          else
            echo "ERROR: Invalid AZURE_KEYVAULT_ENDPOINT format: $VAULT_ENDPOINT" >&2
            exit 1
          fi
          
          echo "üîê Loading all secrets from Azure Key Vault: $VAULT" >&2
          
          # Fun√ß√£o para obter secret com fallback gracioso
          get_secret() {
            local secret_name="$1"
            local fallback_value="$2"
            local secret_value
            
            secret_value=$(az keyvault secret show --vault-name "$VAULT" --name "$secret_name" --query value -o tsv 2>/dev/null || echo "")
            if [ -z "$secret_value" ]; then
              if [ -n "$fallback_value" ]; then
                echo "‚ö†Ô∏è Secret $secret_name not found, using fallback" >&2
                echo "$fallback_value"
              else
                echo "‚ùå Secret $secret_name not found and no fallback provided" >&2
                return 1
              fi
            else
              echo "‚úÖ Secret $secret_name loaded successfully" >&2
              echo "$secret_value"
            fi
          }
          
          # Carregar segredos essenciais (sem fallback - devem falhar se n√£o existirem)
          DB_PASSWORD=$(get_secret "conexao-de-sorte-database-password" "")
          DB_USERNAME=$(get_secret "conexao-de-sorte-database-username" "")
          
          # Carregar segredos com fallbacks seguros
          REDIS_HOST=$(get_secret "conexao-de-sorte-redis-host" "localhost")
          REDIS_PORT=$(get_secret "conexao-de-sorte-redis-port" "6379")
          REDIS_PASSWORD=$(get_secret "conexao-de-sorte-redis-password" "")
          REDIS_DATABASE=$(get_secret "conexao-de-sorte-redis-database" "1")
          
          JWT_SIGNING_KEY=$(get_secret "conexao-de-sorte-jwt-signing-key" "")
          JWT_VERIFICATION_KEY=$(get_secret "conexao-de-sorte-jwt-verification-key" "")
          JWT_KEY_ID=$(get_secret "conexao-de-sorte-jwt-key-id" "")
          JWT_SECRET=$(get_secret "conexao-de-sorte-jwt-secret" "")
          JWT_ISSUER=$(get_secret "conexao-de-sorte-jwt-issuer" "https://conexaodesorte.com.br")
          
          ENCRYPTION_MASTER_KEY=$(get_secret "conexao-de-sorte-encryption-master-key" "")
          ENCRYPTION_BACKUP_KEY=$(get_secret "conexao-de-sorte-encryption-backup-key" "")
          
          CORS_ALLOWED_ORIGINS=$(get_secret "conexao-de-sorte-cors-allowed-origins" "https://conexaodesorte.com.br")
          CORS_ALLOW_CREDENTIALS=$(get_secret "conexao-de-sorte-cors-allow-credentials" "false")
          
          SSL_KEYSTORE_PASSWORD=$(get_secret "conexao-de-sorte-ssl-keystore-password" "")
          
          # Criar/atualizar Docker secrets (remover secrets existentes antes de recriar)
          echo "üîÑ Managing Docker secrets..." >&2
          
          # Fun√ß√£o para criar/recriar secret
          create_or_update_secret() {
            local secret_name="$1"
            local secret_value="$2"
            
            if [ -n "$secret_value" ] && [ "$secret_value" != "" ]; then
              echo "üîÑ Processing secret: $secret_name" >&2
              
              # Remover secret existente se existir (ignorar erros)
              docker secret rm "$secret_name" >/dev/null 2>&1 || true
              
              # Criar novo secret com tratamento de erro robusto
              if printf "%s" "$secret_value" | docker secret create "$secret_name" - >/dev/null 2>&1; then
                echo "‚úÖ Secret $secret_name created successfully" >&2
              else
                echo "‚ö†Ô∏è Warning: Failed to create secret $secret_name, continuing..." >&2
                # N√£o falhar o pipeline por causa de um secret espec√≠fico
              fi
            else
              echo "‚ö†Ô∏è Skipping empty secret $secret_name" >&2
            fi
          }
          
          # Criar todos os secrets
          create_or_update_secret "db_password" "$DB_PASSWORD"
          create_or_update_secret "db_username" "$DB_USERNAME"
          create_or_update_secret "redis_password" "$REDIS_PASSWORD"
          create_or_update_secret "jwt_signing_key" "$JWT_SIGNING_KEY"
          create_or_update_secret "jwt_verification_key" "$JWT_VERIFICATION_KEY"
          create_or_update_secret "encryption_master_key" "$ENCRYPTION_MASTER_KEY"
          
          # Verificar se secrets essenciais foram criados
          echo "üîç Verifying essential secrets..." >&2
          ESSENTIAL_SECRETS=("db_password" "db_username")
          for secret in "${ESSENTIAL_SECRETS[@]}"; do
            if docker secret ls --format "{{.Name}}" | grep -q "^$secret$"; then
              echo "‚úÖ Essential secret $secret verified" >&2
            else
              echo "‚ùå Critical: Essential secret $secret not found" >&2
              echo "Available secrets:" >&2
              docker secret ls >&2
              exit 1
            fi
          done
          
          echo "‚úÖ All essential Docker secrets verified successfully" >&2
          
          # Salvar vari√°veis de ambiente para o pr√≥ximo step
          echo "REDIS_HOST=$REDIS_HOST" >> $GITHUB_ENV
          echo "REDIS_PORT=$REDIS_PORT" >> $GITHUB_ENV
          echo "REDIS_DATABASE=$REDIS_DATABASE" >> $GITHUB_ENV
          echo "JWT_ISSUER=$JWT_ISSUER" >> $GITHUB_ENV
          echo "JWT_KEY_ID=$JWT_KEY_ID" >> $GITHUB_ENV
          echo "JWT_SECRET=$JWT_SECRET" >> $GITHUB_ENV
          echo "ENCRYPTION_BACKUP_KEY=$ENCRYPTION_BACKUP_KEY" >> $GITHUB_ENV
          echo "CORS_ALLOWED_ORIGINS=$CORS_ALLOWED_ORIGINS" >> $GITHUB_ENV
          echo "CORS_ALLOW_CREDENTIALS=$CORS_ALLOW_CREDENTIALS" >> $GITHUB_ENV
          echo "SSL_KEYSTORE_PASSWORD=$SSL_KEYSTORE_PASSWORD" >> $GITHUB_ENV

      - name: üßπ Cleanup existing deployment
        run: |
          # Remove stack existente se houver
          docker stack rm conexao-autenticacao 2>/dev/null || true
          docker stack rm conexao 2>/dev/null || true
          
          # Aguardar limpeza completa
          echo "‚è≥ Aguardando limpeza completa..."
          sleep 15
          
          # Limpar containers √≥rf√£os do servi√ßo autentica√ß√£o
          docker container ls -q --filter "name=autenticacao" | xargs -r docker stop
          docker container ls -aq --filter "name=autenticacao" | xargs -r docker rm
          
          echo "‚úÖ Limpeza conclu√≠da"

      - name: Deploy via docker stack
        run: |
          STACK=conexao-autenticacao
          IMAGE="${{ needs.build-image.outputs.image }}"
          
          # Construir URLs de banco de dados
          DB_HOST="localhost"
          DB_PORT="3306"
          DB_NAME="db_autenticacao"
          
          cat <<EOF | docker stack deploy --with-registry-auth -c - $STACK
          version: "3.9"
          services:
            autenticacao:
              image: $IMAGE
              secrets:
                - db_password
                - db_username
                - redis_password
                - jwt_signing_key
                - jwt_verification_key
                - encryption_master_key
              environment:
                # Spring Configuration
                SPRING_PROFILES_ACTIVE: prod,azure
                TZ: America/Sao_Paulo
                SERVER_PORT: 8080
                
                # Database Configuration (sem placeholders)
                SPRING_R2DBC_URL: "r2dbc:mysql://$DB_HOST:$DB_PORT/$DB_NAME"
                SPRING_FLYWAY_URL: "jdbc:mysql://$DB_HOST:$DB_PORT/$DB_NAME"
                
                # Redis Configuration
                SPRING_DATA_REDIS_HOST: "$REDIS_HOST"
                SPRING_DATA_REDIS_PORT: "$REDIS_PORT"
                SPRING_DATA_REDIS_DATABASE: "$REDIS_DATABASE"
                
                # JWT Configuration
                JWT_ISSUER: "$JWT_ISSUER"
                JWT_KEY_ID: "$JWT_KEY_ID"
                JWT_SECRET: "$JWT_SECRET"
                JWT_ALGORITHM: "RS256"
                JWT_ACCESS_TOKEN_VALIDITY: "86400"
                JWT_REFRESH_TOKEN_VALIDITY: "604800"
                
                # CORS Configuration
                CORS_ALLOWED_ORIGINS: "$CORS_ALLOWED_ORIGINS"
                CORS_ALLOW_CREDENTIALS: "$CORS_ALLOW_CREDENTIALS"
                
                # Azure Configuration
                AZURE_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
                AZURE_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
                AZURE_KEYVAULT_ENDPOINT: "${{ secrets.AZURE_KEYVAULT_ENDPOINT }}"
                AZURE_KEYVAULT_ENABLED: "true"
                
                # Security Configuration
                SSL_KEYSTORE_PASSWORD: "$SSL_KEYSTORE_PASSWORD"
                
                # Feature Flags (valores padr√£o seguros)
                FEATURE_AUTH_MICROSERVICE: "true"
                FEATURE_JWKS_ROTATION: "true"
                FEATURE_AUDIT_LOGGING: "true"
                FEATURE_METRICS_COLLECTION: "true"
                
                # Log Configuration
                LOG_LEVEL_ROOT: "INFO"
                LOG_LEVEL_AUTENTICACAO: "INFO"
                LOG_LEVEL_SECURITY: "WARN"
                LOG_LEVEL_R2DBC: "WARN"
                LOG_LEVEL_MYSQL: "WARN"
                LOG_LEVEL_AZURE: "WARN"
                
                # Tracing Configuration
                TRACING_PROBABILITY: "0.1"
                
                # Rate Limiting Configuration
                RATE_LIMIT_LOGIN: "10"
                RATE_LIMIT_LOGIN_BURST: "20"
                RATE_LIMIT_VALIDATION: "100"
                RATE_LIMIT_VALIDATION_BURST: "200"
                
              deploy:
                restart_policy:
                  condition: on-failure
                  delay: 10s
                  max_attempts: 3
                replicas: 1
                resources:
                  limits:
                    memory: 512M
                  reservations:
                    memory: 256M
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 60s
              networks:
                - conexao-network
          
          secrets:
            db_password:
              external: true
            db_username:
              external: true
            redis_password:
              external: true
            jwt_signing_key:
              external: true
            jwt_verification_key:
              external: true
            encryption_master_key:
              external: true
          
          networks:
            conexao-network:
              external: true
          EOF

      - name: Health‚Äëcheck
        run: docker service ls | grep autenticacao

# ----------------------------------------------------------------------
# JOB 5 ‚ñ∏ NOTIFY
# ----------------------------------------------------------------------

  notify:
    if: always()
    runs-on: ubuntu-latest
    needs: [ build-test-scan, deploy-selfhosted ]
    steps:
      - name: Slack notify
        env:
          WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          RESULT: ${{ needs.deploy-selfhosted.result }}
        shell: bash
        run: |
          if [ -z "$WEBHOOK" ]; then
            echo "‚ÑπÔ∏è Slack webhook n√£o configurado; etapa ignorada" && exit 0
          fi
          COLOR=good && [ "$RESULT" != "success" ] && COLOR=danger
          curl -X POST -H 'Content-type: application/json' \
               --data "{\"text\":\"Autenticacao ‚Äì $RESULT\",\"attachments\":[{\"color\":\"$COLOR\"}]}" \
               "$WEBHOOK"
